{"version":3,"sources":["context/data-context.js","MyMapZoom.js","UploadButton.js","DataTable.js","DataPanel.js","App.js","reportWebVitals.js","index.js"],"names":["DataContext","createContext","DataContextProvider","props","useState","csvValues","undefined","sortedStructures","data","setData","Provider","value","children","randomcolor","require","useStyles","makeStyles","theme","viewDiv","width","height","contentDiv","margin","layerListDiv","fontSize","padding","sortNumAlpha","a","b","localeCompare","numeric","MyMap","classes","useContext","loadData","options","url","css","loadModules","Map","MapView","FeatureLayer","Point","Polyline","Graphic","LayerList","Collection","Home","array","profileInfoDict","length","structurePoints","filter","pt","order","latitude","longitude","sort","profile","otherPoints","sortedProfileNoList","map","s","index","self","indexOf","console","log","randomColors","luminosity","count","hue","colorDict","forEach","profileNo","i","buildPointsFeatures","points","features","item","attr","id","mark","structureAngles","measure","code","attributes","geometry","graphic","push","groupedByProfile","key","reduce","objectsByKeyValue","obj","concat","groupBy","profileDict","d","pointsSorted","pointsCount","profileLength","Math","round","buildLines","pointsCoordinates","linesArray","hasZ","hasM","paths","spatialReference","wkid","lineRenderer","type","field","uniqueValueInfos","Object","keys","label","symbol","symbolLayers","enable","color","size","markerPlacement","endings","placementTemplate","angleToLine","frame","xmin","ymin","xmax","ymax","markerGraphics","rings","createPolylinesLayer","source","objectIdField","fields","name","popupTemplate","title","content","renderer","createStructuresPointsLayer","structuresFeatures","expressionInfos","expression","outline","labelingInfo","structuresLabels","createOtherPointsLayer","otherPointsFeatures","otherPointsLabels","visible","haloColor","haloSize","font","family","style","weight","labelPlacement","labelExpressionInfo","deconflictionStrategy","zoomToLayer","layer","queryExtent","then","response","view","goTo","extent","catch","error","structuresLayer","otherPointsLayer","linesLayer","when","basemap","layers","container","center","zoom","highlightOptions","haloOpacity","fillOpacity","layerList","listItemCreatedFunction","event","includes","actionsOpen","actionsSections","className","ui","add","profileExpressions","structureExpressions","queryProfile","createQuery","queryStructure","whenLayerView","layerView","fullExtent","homeBtn","goToOverride","target","duration","easing","on","queryExpression","queryFunc","actionId","action","find","where","queryFeatures","result","feature","cloneExt","clone","expand","coordsWidget","document","createElement","showCoordinates","coords","toFixed","scale","innerHTML","watch","isStationary","evt","toMap","x","y","useEffect","Date","toLocaleTimeString","getElementById","MyDropZone","onDrop","dataValues","values","struc_mark","struc_angles","parseFloat","onError","err","file","inputElem","reason","addRemoveButton","removeButtonColor","onRemoveFile","config","header","table","body","StyledTableCell","withStyles","root","background","TableCell","StyledTableHeaderCell","BasicTable","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","align","TableBody","DataPanel","display","justifyContent","border","opacity","overflow","default","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.dd23c23c.chunk.js","sourcesContent":["import React, {useState, createContext} from \"react\";\n\nexport const DataContext = createContext()\n\nexport const DataContextProvider = props => {\n    const [data, setData] = useState({\n        csvValues: undefined,\n        sortedStructures: undefined\n    })\n    return (\n        <DataContext.Provider value={[data, setData]}>\n            {props.children}\n        </DataContext.Provider>\n    )\n}","import React, { useContext, useEffect } from \"react\";\nimport { loadModules } from \"esri-loader\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { DataContext } from \"./context/data-context\";\n\nconst randomcolor = require(\"randomcolor\");\n\nconst useStyles = makeStyles((theme) => ({\n  viewDiv: {\n    width: \"100wh\",\n    height: \"90vh\",\n  },\n  contentDiv: {\n    width: \"100wh\",\n    height: \"90vh\",\n    margin: \"10px 5px\",\n  },\n  layerListDiv: {\n    width: \"200px\",\n    fontSize: \"6px\",\n    padding: 0,\n  },\n}));\n\nconst sortNumAlpha = (a, b) => a.localeCompare(b, \"en\", { numeric: true });\n\nconst MyMap = () => {\n  const classes = useStyles();\n\n  // const data = readJSON()\n  const [data, setData] = useContext(DataContext);\n\n  const csvValues = data.csvValues;\n\n  const loadData = async (csvValues) => {\n    try {\n      const options = {\n        url: \"https://js.arcgis.com/4.18/init.js\",\n        css: \"https://js.arcgis.com/4.18/esri/themes/light/main.css\",\n      };\n      const [\n        Map,\n        MapView,\n        FeatureLayer,\n        Point,\n        Polyline,\n        Graphic,\n        LayerList,\n        Collection,\n        Home,\n        array,\n      ] = await loadModules(\n        [\n          \"esri/Map\",\n          \"esri/views/MapView\",\n          \"esri/layers/FeatureLayer\",\n          \"esri/geometry/Point\",\n          \"esri/geometry/Polyline\",\n          \"esri/Graphic\",\n          \"esri/widgets/LayerList\",\n          \"esri/core/Collection\",\n          \"esri/widgets/Home\",\n          \"dojo/_base/array\",\n          \"dojo/domReady!\",\n        ],\n        options\n      );\n      let map;\n      let view;\n      const profileInfoDict = {};\n      let linesLayer;\n\n      if (csvValues && csvValues.length > 0) {\n        const structurePoints = csvValues\n          .filter((pt) => !!pt.order && pt.latitude && pt.longitude)\n          .sort((a, b) => {\n            if (a.profile === b.profile) {\n              return sortNumAlpha(a.order, b.order);\n            } else {\n              return sortNumAlpha(a.profile, b.profile);\n            }\n          });\n        setData({\n          ...data,\n          sortedStructures: structurePoints,\n        });\n        const otherPoints = csvValues.filter(\n          (pt) => !pt.order && pt.latitude && pt.longitude\n        );\n        const sortedProfileNoList = structurePoints\n          .map((s) => s.profile)\n          .sort((a, b) => sortNumAlpha(a, b))\n          .filter((value, index, self) => self.indexOf(value) === index);\n        console.log(\"Sorted profile no list: \", sortedProfileNoList);\n        const randomColors = randomcolor({\n          luminosity: \"bright\",\n          count: sortedProfileNoList.length,\n          hue: \"red\",\n        });\n        const colorDict = {};\n        sortedProfileNoList.forEach((profileNo, i) => {\n          colorDict[profileNo] = randomColors[i];\n        });\n        console.log(\"Colors: \", colorDict);\n        console.log(\n          \"Structure Data: \",\n          \"data length: \",\n          structurePoints.length,\n          \"sample: \",\n          structurePoints[0]\n        );\n        console.log(\n          \"Other Data: \",\n          \"data length: \",\n          otherPoints.length,\n          \"sample: \",\n          otherPoints[0]\n        );\n        //   const structureIDList = structurePoints.map((pt) => pt.id);\n\n        const buildPointsFeatures = (points) => {\n          //loop through the items and add to the feature layer\n          const features = [];\n          array.forEach(points, function (item, index) {\n            // console.log(\"item\", item);\n            const attr = {};\n            //pull in any additional attributes if required\n            attr[\"objectID\"] = index;\n            attr[\"id\"] = item.id;\n            if (item.order) {\n              attr[\"mark\"] = item.mark;\n              attr[\"profile\"] = item.profile;\n              attr[\"order\"] = item.order;\n              attr[\"structureAngles\"] = item.structureAngles;\n              attr[\"measure\"] = item.measure;\n            }\n            attr[\"longitude\"] = item.longitude;\n            attr[\"latitude\"] = item.latitude;\n            attr[\"code\"] = item.code;\n            attr[\"attributes\"] = item.attributes;\n\n            const geometry = new Point(item.longitude, item.latitude);\n\n            const graphic = new Graphic({\n              geometry: geometry,\n              attributes: attr,\n            });\n            features.push(graphic);\n          });\n\n          //   console.log(\"retrieved \", features.length, \" points\");\n          return features;\n        };\n\n        const groupBy = (key) => (array) =>\n          array.reduce((objectsByKeyValue, obj) => {\n            const value = obj[key];\n            objectsByKeyValue[value] = (objectsByKeyValue[value] || []).concat(\n              obj\n            );\n            return objectsByKeyValue;\n          }, {});\n\n        const groupedByProfile = groupBy(\"profile\");\n        const profileDict = groupedByProfile(structurePoints);\n        // console.log('profile dict', profileDict)\n        sortedProfileNoList.map((profileNo) => {\n          let d = {\n            pointsSorted: profileDict[profileNo].sort((a, b) =>\n              sortNumAlpha(a.order, b.order)\n            ),\n            pointsCount: profileDict[profileNo].length,\n          };\n          const profileLength = Math.round(\n            d.pointsSorted[d.pointsCount - 1].measure,\n            0\n          );\n          d = { profileLength, ...d };\n          profileInfoDict[profileNo] = d;\n        });\n\n        // console.log(\"profile sorted dict\", profileInfoDict);\n\n        const buildLines = () => {\n          //   console.log('grouped', profilePoints)\n          const linesArray = [];\n          let pointsCoordinates;\n          let points;\n          sortedProfileNoList.map((profileNo, index) => {\n            points = profileInfoDict[profileNo].pointsSorted;\n            // console.log(\"Profile \", profileNo, points);\n            pointsCoordinates = [];\n            points.map((pt) =>\n              pointsCoordinates.push([pt.longitude, pt.latitude])\n            );\n            const geometry = new Polyline({\n              hasZ: false,\n              hasM: true,\n              paths: pointsCoordinates,\n              spatialReference: { wkid: 4326 },\n            });\n            const attr = {};\n            attr[\"objectID\"] = index;\n            attr[\"profileNo\"] = profileNo;\n            attr[\"count\"] = points.length;\n            attr[\"length\"] = points[points.length - 1].measure;\n            const graphic = new Graphic({\n              geometry: geometry,\n              attributes: attr,\n            });\n            linesArray.push(graphic);\n          });\n          //   console.log(\"build lines: \", linesArray.length);\n\n          const createLineSymbol = (value, color) => {\n            // color parameter could be used to render different color, but now not used.\n            return {\n              value: value,\n              label: value,\n              symbol: {\n                type: \"cim\", // autocasts as CIMSymbol\n                data: {\n                  type: \"CIMSymbolReference\",\n                  symbol: {\n                    type: \"CIMLineSymbol\",\n                    symbolLayers: [\n                      {\n                        // black 1px line symbol\n                        type: \"CIMSolidStroke\",\n                        enable: true,\n                        width: 3,\n                        color: [240, 94, 35, 255],\n                      },\n                      {\n                        // arrow symbol\n                        type: \"CIMVectorMarker\",\n                        enable: true,\n                        size: 10,\n                        markerPlacement: {\n                          type: \"CIMMarkerPlacementAlongLineSameSize\", // places same size markers along the line\n                          endings: \"WithMarkers\",\n                          placementTemplate: [30], // determines space between each arrow\n                          angleToLine: true, // symbol will maintain its angle to the line when map is rotated\n                        },\n                        frame: {\n                          xmin: -5,\n                          ymin: -5,\n                          xmax: 5,\n                          ymax: 5,\n                        },\n                        markerGraphics: [\n                          {\n                            type: \"CIMMarkerGraphic\",\n                            geometry: {\n                              rings: [\n                                [\n                                  [-8, -5.47],\n                                  [-8, 5.6],\n                                  [1.96, -0.03],\n                                  [-8, -5.47],\n                                ],\n                              ],\n                            },\n                            symbol: {\n                              // black fill for the arrow symbol\n                              type: \"CIMPolygonSymbol\",\n                              symbolLayers: [\n                                {\n                                  type: \"CIMSolidFill\",\n                                  enable: true,\n                                  color: [240, 94, 35, 255],\n                                },\n                              ],\n                            },\n                          },\n                        ],\n                      },\n                    ],\n                  },\n                },\n              },\n            };\n          };\n\n          const lineRenderer = {\n            type: \"unique-value\",\n            field: \"profileNo\",\n            uniqueValueInfos: Object.keys(profileInfoDict).map((profileNo) =>\n              createLineSymbol(profileNo, colorDict[profileNo])\n            ),\n          };\n\n          return [linesArray, lineRenderer];\n        };\n\n        const createPolylinesLayer = () => {\n          const [linesArray, lineRenderer] = buildLines();\n          //   console.log(\"line arrays\", linesArray);\n          //   console.log(\"line render\", lineRenderer);\n          return new FeatureLayer({\n            source: linesArray,\n            objectIdField: \"objectID\",\n            fields: [\n              {\n                name: \"objectID\",\n                type: \"oid\",\n              },\n              {\n                name: \"profileNo\",\n                type: \"string\",\n              },\n              {\n                name: \"count\",\n                type: \"integer\",\n              },\n              {\n                name: \"length\",\n                type: \"double\",\n              },\n            ],\n            popupTemplate: {\n              title: \"Profile\",\n              content: \"Profile {profileNo} - {count} structures - {length} m\",\n            },\n            renderer: lineRenderer,\n            title: \"Profiles\",\n          });\n        };\n\n        //  Creates a client-side FeatureLayer from an array of graphics\n        const createStructuresPointsLayer = () => {\n          const structuresFeatures = buildPointsFeatures(structurePoints);\n          //   console.log(\"points list\", structuresFeatures);\n\n          const createColorSymbol = (value) => ({\n            value: value,\n            symbol: {\n              type: \"simple-marker\", // autocasts as new SimpleMarkerSymbol()\n              size: 8,\n              color: colorDict[value],\n              outline: {\n                // autocasts as new SimpleLineSymbol()\n                width: 1.5,\n                color: \"white\",\n              },\n            },\n            label: value,\n          });\n          return new FeatureLayer({\n            source: structuresFeatures,\n            objectIdField: \"objectID\",\n            fields: [\n              {\n                name: \"objectID\",\n                type: \"oid\",\n              },\n              {\n                name: \"id\",\n                type: \"string\",\n              },\n              {\n                name: \"profile\",\n                type: \"string\",\n              },\n              {\n                name: \"order\",\n                type: \"string\",\n              },\n              {\n                name: \"structureAngles\",\n                type: \"string\",\n              },\n              {\n                name: \"latitude\",\n                type: \"double\",\n              },\n              {\n                name: \"longitude\",\n                type: \"double\",\n              },\n              {\n                name: \"measure\",\n                type: \"double\",\n              },\n              {\n                name: \"code\",\n                type: \"string\",\n              },\n              {\n                name: \"mark\",\n                type: \"string\",\n              },\n              {\n                name: \"attributes\",\n                type: \"string\",\n              },\n            ],\n            popupTemplate: {\n              title: \"Structure Point\",\n              expressionInfos: [\n                {\n                  name: \"measure-roundup\",\n                  title: \"Measure Roundup\",\n                  expression: \"Round($feature.measure, 2)\",\n                },\n              ],\n              content:\n                \"<div>\" +\n                \"<h3>Point {mark}{order} - Profile{profile} - {id} - {code}</h3>\" +\n                \"<ul>\" +\n                \"<li>Measure: {expression/measure-roundup} m</li>\" +\n                \"<li>StructureAngles: {structureAngles}</li>\" +\n                \"<li>Attributes: {attributes}</li>\" +\n                \"</ul>\" +\n                \"</div>\",\n            },\n\n            renderer: {\n              type: \"unique-value\",\n              field: \"profile\",\n              uniqueValueInfos: sortedProfileNoList.map((profileNo) =>\n                createColorSymbol(profileNo)\n              ),\n            },\n            labelingInfo: structuresLabels,\n            title: \"Structure Points\",\n          });\n        };\n\n        const createOtherPointsLayer = () => {\n          const otherPointsFeatures = buildPointsFeatures(otherPoints);\n          console.log(\"other points number\", otherPointsFeatures.length);\n          const otherPointsLayer = new FeatureLayer({\n            source: otherPointsFeatures,\n            objectIdField: \"objectID\",\n            fields: [\n              {\n                name: \"objectID\",\n                type: \"oid\",\n              },\n              {\n                name: \"id\",\n                type: \"string\",\n              },\n              {\n                name: \"latitude\",\n                type: \"double\",\n              },\n              {\n                name: \"longitude\",\n                type: \"double\",\n              },\n              {\n                name: \"code\",\n                type: \"string\",\n              },\n              {\n                name: \"attributes\",\n                type: \"string\",\n              },\n            ],\n            popupTemplate: {\n              title: \"Non-Structure Point\",\n              content:\n                \"<p>Point <b>{id} ({code})</b></p>\" +\n                \"<ul><li>{attributes}</li><ul>\",\n            },\n            renderer: {\n              type: \"simple\", // autocasts as new SimpleRenderer()\n              symbol: {\n                type: \"simple-marker\", // autocasts as new SimpleMarkerSymbol()\n                size: 5,\n                color: \"blue\",\n                outline: {\n                  // autocasts as new SimpleLineSymbol()\n                  width: 0.5,\n                  color: \"white\",\n                },\n              },\n            },\n            labelingInfo: otherPointsLabels,\n            title: \"Non-Structure Points\",\n            visible: false,\n          });\n          return otherPointsLayer;\n        };\n\n        const structuresLabels = {\n          symbol: {\n            type: \"text\",\n            color: \"red\",\n            haloColor: \"white\",\n            haloSize: \"1.5px\",\n            font: {\n              size: \"18px\",\n              family: \"Noto Sans\",\n              style: \"italic\",\n              weight: \"bolder\",\n            },\n          },\n          labelPlacement: \"above-right\",\n          labelExpressionInfo: {\n            expression:\n              \"'P' + $feature.profile + '-' + $feature.mark[0] + '' + $feature.order\",\n          },\n          deconflictionStrategy: \"static\",\n        };\n\n        const otherPointsLabels = {\n          symbol: {\n            type: \"text\",\n            color: \"blue\",\n            haloColor: \"white\",\n            haloSize: \"1px\",\n            font: {\n              size: \"15px\",\n              family: \"Noto Sans\",\n              style: \"italic\",\n              weight: \"bolder\",\n            },\n          },\n          labelPlacement: \"above-right\",\n          labelExpressionInfo: {\n            expression: \"$feature.id + ' - ' + $feature.code\",\n          },\n          deconflictionStrategy: \"static\",\n        };\n\n        const zoomToLayer = (layer) => {\n          //   console.log(`Zoom to ${layer.title}`);\n          return layer.queryExtent().then(function (response) {\n            view.goTo(response.extent).catch(function (error) {\n              if (error.name !== \"AbortError\") {\n                console.error(error);\n              }\n            });\n          });\n        };\n\n        const structuresLayer = createStructuresPointsLayer();\n        const otherPointsLayer = createOtherPointsLayer();\n        linesLayer = createPolylinesLayer();\n\n        linesLayer.when(function () {\n          console.log(\"Zoom to line layer\");\n          zoomToLayer(linesLayer);\n        });\n\n        map = new Map({\n          basemap: \"hybrid\",\n          layers: [linesLayer, otherPointsLayer, structuresLayer],\n        });\n        view = new MapView({\n          container: \"viewDiv\",\n          center: [-168, 46],\n          zoom: 2,\n          map: map,\n          // set highlightOptions like color and fillOpacity\n          highlightOptions: {\n            color: [255, 255, 0, 1],\n            haloOpacity: 0.9,\n            fillOpacity: 0.4,\n          },\n        });\n\n        const createActions = (event) => {\n          const item = event.item;\n          //   console.log(\"item\", item);\n\n          if (item.title.includes(\"Profile\")) {\n            item.actionsOpen = true;\n            item.actionsSections = [\n              [\"All\", ...sortedProfileNoList].map((profileNo) => {\n                // console.log(\"profile detail\", profileInfoDict[profileNo]);\n                let profileLength;\n                if (profileNo === \"All\") {\n                  profileLength = Object.keys(profileInfoDict)\n                    .map(\n                      (profileNo) => profileInfoDict[profileNo].profileLength\n                    )\n                    .reduce((a, b) => a + b);\n                } else {\n                  profileLength = profileInfoDict[profileNo].profileLength;\n                }\n                return {\n                  title: `Profile ${profileNo} - ${profileLength} m`,\n                  className: \"esri-icon-zoom-out-fixed\",\n                  id: profileNo,\n                };\n              }),\n            ];\n          } else if (item.title === \"Structure Points\") {\n            item.actionsOpen = false;\n            item.actionsSections = [\n              structurePoints.map((pt) => {\n                return {\n                  title: `P${pt.profile}-${pt.mark[0]}${pt.order}-${pt.id}\n                                    ${\n                                      pt.structureAngles.includes(\"running\")\n                                        ? \"-Running\"\n                                        : \"\"\n                                    }\n                                    ${\n                                      pt.structureAngles.includes(\"tap\")\n                                        ? \"-Tap\"\n                                        : \"\"\n                                    }`,\n                  className: \"esri-icon-zoom-out-fixed\",\n                  id: `${pt.id}`,\n                };\n              }),\n            ];\n          }\n        };\n        const layerList = new LayerList({\n          view: view,\n          listItemCreatedFunction: createActions,\n          container: \"layerListDiv\",\n        });\n        view.ui.add(layerList, \"top-right\");\n\n        // definitionExpressions used by each action\n        // listed in the LayerList\n\n        const profileExpressions = new Collection(\n          [\"All\", ...Object.keys(profileInfoDict)].map((profileNo) => ({\n            id: profileNo,\n            expression: `profileNo = '${profileNo}'`,\n          }))\n        );\n        const structureExpressions = new Collection(\n          structurePoints.map((pt) => ({\n            id: pt.id,\n            expression: `id = '${pt.id}'`,\n          }))\n        );\n\n        // When an action is triggered, the definitionExpression\n        // is set on the layer and the view's extent updates\n        // to match the features visible in the layer\n\n        const queryProfile = linesLayer.createQuery();\n        const queryStructure = structuresLayer.createQuery();\n        view.whenLayerView(linesLayer).then((layerView) => {\n          const fullExtent = linesLayer.fullExtent;\n          const homeBtn = new Home({\n            view: view,\n          });\n          homeBtn.goToOverride = () => {\n            view\n              .goTo(\n                {\n                  target: fullExtent,\n                },\n                {\n                  duration: 2000,\n                  easing: \"in-out-expo\",\n                }\n              )\n              .catch((error) => {\n                if (error.name !== \"AbortError\") {\n                  console.log(error);\n                }\n              });\n          };\n          view.ui.add(homeBtn, \"top-left\");\n          layerList.on(\"trigger-action\", (event) => {\n            const actionId = event.action.id;\n            const layer = event.item.layer;\n\n            let queryExpression;\n            let queryFunc;\n            if (event.item.title.includes(\"Profile\")) {\n              queryExpression = profileExpressions.find((item) => {\n                return item.id === actionId;\n              }).expression;\n              queryFunc = queryProfile;\n            } else {\n              queryExpression = structureExpressions.find((item) => {\n                return item.id === actionId;\n              }).expression;\n              queryFunc = queryStructure;\n            }\n            console.log(\"Expression: \", queryExpression);\n\n            if (!queryExpression.includes(\"All\")) {\n              queryFunc.where = queryExpression;\n              layer.queryFeatures(queryFunc).then((result) => {\n                // the feature to be highlighted\n                const feature = result.features[0];\n\n                console.log(\"type\", feature.geometry.type);\n                if (feature.geometry.type === \"point\") {\n                  view\n                    .goTo(\n                      {\n                        target: feature.geometry,\n                        zoom: 20,\n                      },\n                      {\n                        duration: 2000,\n                        easing: \"in-out-expo\",\n                      }\n                    )\n                    .catch((error) => {\n                      if (error.name !== \"AbortError\") {\n                        console.log(error);\n                      }\n                    });\n                } else {\n                  const ext = feature.geometry.extent;\n\n                  const cloneExt = ext.clone();\n                  // center the feature\n                  view\n                    .goTo(\n                      {\n                        target: feature.geometry,\n                        extent: cloneExt.expand(1.5),\n                      },\n                      {\n                        duration: 2000,\n                        easing: \"in-out-expo\",\n                      }\n                    )\n                    .catch((error) => {\n                      if (error.name !== \"AbortError\") {\n                        console.log(error);\n                      }\n                    });\n                }\n              });\n            } else {\n              view\n                .goTo(\n                  {\n                    target: fullExtent,\n                  },\n                  {\n                    duration: 2000,\n                    easing: \"in-out-expo\",\n                  }\n                )\n                .catch((error) => {\n                  if (error.name !== \"AbortError\") {\n                    console.log(error);\n                  }\n                });\n            }\n          });\n        });\n      } else {\n        map = new Map({\n          basemap: \"hybrid\",\n        });\n        view = new MapView({\n          container: \"viewDiv\",\n          center: [-116, 54],\n          zoom: 6,\n          map: map,\n          // set highlightOptions like color and fillOpacity\n          highlightOptions: {\n            color: [255, 255, 0, 1],\n            haloOpacity: 0.9,\n            fillOpacity: 0.4,\n          },\n        });\n      }\n\n      const coordsWidget = document.createElement(\"div\");\n      coordsWidget.id = \"coordsWidget\";\n      coordsWidget.className = \"esri-widget esri-component\";\n      coordsWidget.style.padding = \"7px 15px 5px\";\n\n      view.ui.add(coordsWidget, \"bottom-left\");\n\n      const showCoordinates = (pt) => {\n        const coords =\n          \"Lat/Lon \" +\n          pt.latitude.toFixed(3) +\n          \" \" +\n          pt.longitude.toFixed(3) +\n          \" | Scale 1:\" +\n          Math.round(view.scale * 1) / 1 +\n          \" | Zoom \" +\n          view.zoom;\n        coordsWidget.innerHTML = coords;\n      };\n\n      view.watch(\"stationary\", function (isStationary) {\n        showCoordinates(view.center);\n      });\n\n      view.on(\"pointer-move\", function (evt) {\n        showCoordinates(view.toMap({ x: evt.x, y: evt.y }));\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  useEffect(() => {\n    console.log(`Map get data: ${new Date().toLocaleTimeString()}`, csvValues);\n\n    const layerListDiv = document.getElementById(\"layerListDiv\");\n    if (layerListDiv) {\n      layerListDiv.innerHTML = \"\";\n    }\n    loadData(csvValues);\n  }, [csvValues]);\n\n  return (\n    <div id=\"contentDiv\" className={classes.contentDiv}>\n      <div id=\"viewDiv\" className={classes.viewDiv} />\n      {csvValues && <div id=\"layerListDiv\" className={classes.layerListDiv} />}\n    </div>\n  );\n};\n\nexport default MyMap;\n","import React, {useContext} from 'react'\n\nimport {CSVReader} from 'react-papaparse'\nimport {DataContext} from \"./context/data-context\";\n\nconst MyDropZone = () => {\n    const [data, setData] = useContext(DataContext)\n    const handleOnDrop = (data) => {\n        // console.log('values: ', Object.values(data))\n        const dataValues = Object.values(data)\n            .filter(item => !!item)\n            .map(item => {\n                    const obj = item.data\n                    if (item.data.order) {\n                        return {\n                            id: obj.id,\n                            code: obj.code,\n                            mark: obj.struc_mark,\n                            profile: obj.profile,\n                            order: obj.order,\n                            structureAngles: obj.struc_angles,\n                            longitude: parseFloat(obj.longitude),\n                            latitude: parseFloat(obj.latitude),\n                            measure: parseFloat(obj.measure),\n                            attributes: obj.attributes,\n                        }\n\n                    } else {\n\n                        return {\n                            id: obj.id,\n                            code: obj.code,\n                            longitude: parseFloat(obj.longitude),\n                            latitude: parseFloat(obj.latitude),\n                            attributes: obj.attributes,\n                        }\n                    }\n                }\n            )\n        // console.log('Read as: ', dataValues)\n        setData({\n            ...data,\n            csvValues: dataValues\n        })\n    }\n\n    const handleOnError = (err, file, inputElem, reason) => {\n        console.log(err)\n    }\n\n    const handleOnRemoveFile = (data) => {\n    }\n\n    return (\n        <CSVReader\n            onDrop={handleOnDrop}\n            onError={handleOnError}\n            addRemoveButton\n            removeButtonColor='#659cef'\n            onRemoveFile={handleOnRemoveFile}\n            config={{header: true}}\n        >\n            <span>Drop CSV file here or click to upload.</span>\n        </CSVReader>\n    )\n}\n\nexport default MyDropZone","import React, { useContext } from \"react\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { DataContext } from \"./context/data-context\";\nimport { blueGrey } from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles({\n  table: {},\n  body: {\n    // width: 700,\n  },\n  header: {\n    // width: 700,\n    // headerStyle: {position: 'sticky', top: 0},\n  },\n});\n\nconst StyledTableCell = withStyles({\n  root: {\n    color: \"black\",\n    background: \"whitesmoke\",\n    fontSize: 16,\n  },\n})(TableCell);\n\nconst StyledTableHeaderCell = withStyles({\n  root: {\n    color: \"white\",\n    background: \"slateblue\",\n    fontSize: 18,\n  },\n})(TableCell);\n\nexport default function BasicTable() {\n  const [data] = useContext(DataContext);\n  const structurePoints = data.sortedStructures;\n\n  const classes = useStyles();\n\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"simple table\">\n        <TableHead className={classes.header}>\n          <TableRow>\n            <StyledTableHeaderCell align=\"middle\">ID</StyledTableHeaderCell>\n            <StyledTableHeaderCell align=\"middle\">\n              Profile\n            </StyledTableHeaderCell>\n            <StyledTableHeaderCell align=\"middle\">STR#</StyledTableHeaderCell>\n            <StyledTableHeaderCell align=\"middle\">Code</StyledTableHeaderCell>\n            <StyledTableHeaderCell align=\"middle\">\n              Measure&nbsp;(m)\n            </StyledTableHeaderCell>\n            <StyledTableHeaderCell align=\"middle\">Angles</StyledTableHeaderCell>\n          </TableRow>\n        </TableHead>\n        <TableBody className={classes.body}>\n          {structurePoints &&\n            structurePoints.map((pt) => (\n              <TableRow key={pt.id}>\n                <StyledTableCell align=\"middle\"> {pt.id}</StyledTableCell>\n                <StyledTableCell align=\"middle\"> {pt.profile}</StyledTableCell>\n                <StyledTableCell align=\"middle\">\n                  {pt.mark}\n                  {pt.order}\n                </StyledTableCell>\n                <StyledTableCell align=\"middle\">{pt.code}</StyledTableCell>\n                <StyledTableCell align=\"middle\">{pt.measure}</StyledTableCell>\n                <StyledTableCell align=\"middle\">\n                  {pt.structureAngles}\n                </StyledTableCell>\n              </TableRow>\n            ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n","import React, {useContext} from \"react\";\nimport {Rnd} from \"react-rnd\"\nimport DataTable from \"./DataTable\"\nimport {DataContext} from \"./context/data-context\";\n\n\nconst DataPanel = () => {\n    const [data] = useContext(DataContext);\n    const style = {\n    display: data.csvValues? \"flex\": \"none\",\n    // alignItems: \"center\",\n    justifyContent: \"center\",\n    border: \"solid 1px #ddd\",\n    background: \"darkgray\",\n    color: \"white\",\n    opacity: 0.8,\n    // padding: \"20px 10px\",\n    overflow: \"auto\",\n\n};\n    return (\n        <Rnd style={style}\n             default={{\n                 x: 30,\n                 y: 200,\n                 width: 700,\n                 height: 350,\n             }}\n        >\n            <DataTable/>\n        </Rnd>\n    )\n};\n\nexport default DataPanel;","import React, { useEffect } from \"react\";\nimport MyMap from \"./MyMapZoom\";\nimport MyDropZone from \"./UploadButton\";\nimport { DataContextProvider } from \"./context/data-context\";\nimport DataPanel from \"./DataPanel\";\n\nconst App = () => {\n  useEffect(() => {\n    document.title = \"Fortis CSV Viewer\";\n  }, []);\n  return (\n    <div style={{ width: \"95%\", height: \"100%\", margin: \"auto\" }}>\n      <DataContextProvider>\n        <MyDropZone />\n        <MyMap />\n        <DataPanel />\n      </DataContextProvider>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}