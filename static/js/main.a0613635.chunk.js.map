{"version":3,"sources":["context/data-context.js","MyMapZoom.js","UploadButton.js","App.js","reportWebVitals.js","index.js"],"names":["DataContext","createContext","DataContextProvider","props","useState","data","setData","Provider","value","children","randomcolor","require","useStyles","makeStyles","theme","viewDiv","width","height","contentDiv","margin","layerListDiv","fontSize","padding","MyMap","classes","useContext","loadData","a","structurePoints","filter","pt","order","latitude","longitude","otherPoints","console","log","length","options","url","css","loadModules","Map","MapView","FeatureLayer","Point","Polyline","Graphic","LayerList","Collection","array","buildPointsFeatures","points","features","forEach","item","attr","id","profile","measure","code","attributes","geometry","graphic","push","groupedByProfile","key","reduce","objectsByKeyValue","obj","concat","groupBy","profileDict","profileInfoDict","Object","keys","map","profileNo","d","pointsSorted","sort","b","parseInt","pointsCount","profileLength","Math","round","buildLines","pointsCoordinates","linesArray","hasZ","hasM","paths","spatialReference","wkid","lineRenderer","type","field","uniqueValueInfos","color","luminosity","hue","symbol","label","createPolylinesLayer","source","objectIdField","fields","name","popupTemplate","title","content","renderer","createStructuresPointsLayer","structuresFeatures","expressionInfos","expression","size","outline","labelingInfo","structuresLabels","createOtherPointsLayer","otherPointsFeatures","otherPointsLabels","haloColor","haloSize","font","family","style","weight","labelPlacement","labelExpressionInfo","deconflictionStrategy","zoomToLayer","layer","queryExtent","then","response","view","goTo","extent","catch","error","structuresLayer","otherPointsLayer","linesLayer","when","basemap","layers","container","center","zoom","highlightOptions","haloOpacity","fillOpacity","layerList","listItemCreatedFunction","event","includes","actionsOpen","actionsSections","className","ui","add","profileExpressions","queryProfile","createQuery","whenLayerView","layerView","fullExtent","on","actionId","action","queryExpression","find","target","duration","easing","where","queryFeatures","result","feature","cloneExt","clone","expand","coordsWidget","document","createElement","showCoordinates","coords","toFixed","scale","innerHTML","watch","isStationary","evt","toMap","x","y","useEffect","Date","toLocaleTimeString","getElementById","MyDropZone","onDrop","dataValues","values","parseFloat","onError","err","file","inputElem","reason","addRemoveButton","removeButtonColor","onRemoveFile","config","header","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a0613635.chunk.js","sourcesContent":["import React, {useState, createContext} from \"react\";\n\nexport const DataContext = createContext()\n\nexport const DataContextProvider = props => {\n    const [data, setData] = useState([])\n    return (\n        <DataContext.Provider value={[data, setData]}>\n            {props.children}\n        </DataContext.Provider>\n    )\n}","import React, {useContext, useEffect} from \"react\";\nimport {loadModules} from \"esri-loader\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {DataContext} from \"./context/data-context\";\n\nconst randomcolor = require(\"randomcolor\");\n\nconst useStyles = makeStyles((theme) => ({\n    viewDiv: {\n        width: \"100wh\",\n        height: \"90vh\",\n    },\n    contentDiv: {\n        width: \"100wh\",\n        height: \"90vh\",\n        margin: \"10px 5px\",\n    },\n    layerListDiv: {\n        width: \"200px\",\n        fontSize: \"6px\",\n        padding: 0,\n    },\n}));\n\nconst MyMap = () => {\n    const classes = useStyles();\n\n    // const data = readJSON()\n    const [data] = useContext(DataContext)\n\n    const loadData = async (data) => {\n        try {\n            const structurePoints = data.filter(pt => !!pt.order && pt.latitude && pt.longitude);\n            const otherPoints = data.filter(pt => !pt.order && pt.latitude && pt.longitude)\n            console.log('Structure Data: ', 'data length: ', structurePoints.length, 'sample: ', structurePoints[0])\n            console.log('Other Data: ', 'data length: ', otherPoints.length, 'sample: ', otherPoints[0])\n            //   const structureIDList = structurePoints.map((pt) => pt.id);\n            const options = {\n                url: \"https://js.arcgis.com/4.18/init.js\",\n                css: \"https://js.arcgis.com/4.18/esri/themes/light/main.css\",\n            };\n            const [\n                Map,\n                MapView,\n                FeatureLayer,\n                Point,\n                Polyline,\n                Graphic,\n                LayerList,\n                Collection,\n                array,\n            ] = await loadModules(\n                [\n                    \"esri/Map\",\n                    \"esri/views/MapView\",\n                    \"esri/layers/FeatureLayer\",\n                    \"esri/geometry/Point\",\n                    \"esri/geometry/Polyline\",\n                    \"esri/Graphic\",\n                    \"esri/widgets/LayerList\",\n                    \"esri/core/Collection\",\n                    \"dojo/_base/array\",\n                    \"dojo/domReady!\",\n                ],\n                options\n            );\n\n            const buildPointsFeatures = (points) => {\n                //loop through the items and add to the feature layer\n                const features = [];\n                array.forEach(points, function (item) {\n                    // console.log(\"item\", item);\n                    const attr = {};\n                    //pull in any additional attributes if required\n                    attr[\"id\"] = item.id;\n                    if (item.order) {\n                        attr[\"profile\"] = item.profile;\n                        attr[\"order\"] = item.order;\n                        attr[\"measure\"] = item.measure;\n                    }\n                    attr[\"longitude\"] = item.longitude;\n                    attr[\"latitude\"] = item.latitude;\n                    attr[\"code\"] = item.code;\n                    attr[\"attributes\"] = item.attributes;\n\n                    const geometry = new Point(item.longitude, item.latitude);\n\n                    const graphic = new Graphic({\n                        geometry: geometry,\n                        attributes: attr,\n                    });\n                    features.push(graphic);\n                });\n\n                //   console.log(\"retrieved \", features.length, \" points\");\n                return features;\n            }\n\n\n            const groupBy = (key) => (array) =>\n                array.reduce((objectsByKeyValue, obj) => {\n                    const value = obj[key];\n                    objectsByKeyValue[value] = (objectsByKeyValue[value] || []).concat(\n                        obj\n                    );\n                    return objectsByKeyValue;\n                }, {});\n\n            const groupedByProfile = groupBy(\"profile\");\n            const profileDict = groupedByProfile(structurePoints);\n            // console.log('profile dict', profileDict)\n            const profileInfoDict = {};\n            Object.keys(profileDict).map((profileNo) => {\n                let d = {\n                    pointsSorted: profileDict[profileNo].sort((a, b) =>\n                        parseInt(a.order) < parseInt(b.order) ? -1 : 1\n                    ),\n                    pointsCount: profileDict[profileNo].length,\n                };\n                const profileLength = Math.round(\n                    d.pointsSorted[d.pointsCount - 1].measure,\n                    0\n                );\n                d = {profileLength, ...d};\n                profileInfoDict[profileNo] = d;\n            });\n\n            // console.log(\"profile sorted dict\", profileInfoDict);\n\n            const buildLines = () => {\n                //   console.log('grouped', profilePoints)\n                const linesArray = [];\n                let pointsCoordinates;\n                let points;\n                Object.keys(profileInfoDict).map((profileNo) => {\n                    points = profileInfoDict[profileNo].pointsSorted;\n                    // console.log(\"Profile \", profileNo, points);\n                    pointsCoordinates = [];\n                    points.map((pt) =>\n                        pointsCoordinates.push([pt.longitude, pt.latitude])\n                    );\n                    const geometry = new Polyline({\n                        hasZ: false,\n                        hasM: true,\n                        paths: pointsCoordinates,\n                        spatialReference: {wkid: 4326},\n                    });\n                    const attr = {};\n                    attr[\"objectID\"] = profileNo;\n                    attr[\"count\"] = points.length;\n                    attr[\"length\"] = points[points.length - 1].measure;\n                    const graphic = new Graphic({\n                        geometry: geometry,\n                        attributes: attr,\n                    });\n                    linesArray.push(graphic);\n                });\n                //   console.log(\"build lines: \", linesArray.length);\n\n                const createLineSymbol = (value, color) => {\n                    return {\n                        value: value,\n                        symbol: {\n                            type: \"simple-line\", // autocasts as SimpleLineSymbol()\n                            color: color,\n                            width: 3,\n                        },\n                        label: value,\n                    };\n                };\n\n                const lineRenderer = {\n                    type: \"unique-value\",\n                    field: \"objectID\",\n                    uniqueValueInfos: Object.keys(profileInfoDict).map((profileNo) =>\n                        createLineSymbol(\n                            profileNo,\n                            randomcolor({\n                                luminosity: \"bright\",\n                                hue: \"red\",\n                            })\n                        )\n                    ),\n                };\n\n                return [linesArray, lineRenderer];\n            };\n\n            const createPolylinesLayer = () => {\n                const [linesArray, lineRenderer] = buildLines();\n                //   console.log(\"line arrays\", linesArray);\n                //   console.log(\"line render\", lineRenderer);\n                return new FeatureLayer({\n                    source: linesArray,\n                    objectIdField: \"objectID\",\n                    fields: [\n                        {\n                            name: \"objectID\",\n                            type: \"oid\",\n                        },\n                        {\n                            name: \"count\",\n                            type: \"integer\",\n                        },\n                        {\n                            name: \"length\",\n                            type: \"double\",\n                        },\n                    ],\n                    popupTemplate: {\n                        title: \"Profile\",\n                        content: \"Profile {objectID} - {count} structures - {length} m\",\n                    },\n                    renderer: lineRenderer,\n                    title: \"Profiles\",\n                });\n            }\n\n            //  Creates a client-side FeatureLayer from an array of graphics\n            const createStructuresPointsLayer = () => {\n                const structuresFeatures = buildPointsFeatures(structurePoints);\n                //   console.log(\"points list\", structuresFeatures);\n\n                return new FeatureLayer({\n                    source: structuresFeatures,\n                    objectIdField: \"id\",\n                    fields: [\n                        {\n                            name: \"id\",\n                            type: \"oid\",\n                        },\n                        {\n                            name: \"profile\",\n                            type: \"string\",\n                        },\n                        {\n                            name: \"order\",\n                            type: \"string\",\n                        },\n                        {\n                            name: \"latitude\",\n                            type: \"double\",\n                        },\n                        {\n                            name: \"longitude\",\n                            type: \"double\",\n                        },\n                        {\n                            name: \"measure\",\n                            type: \"double\",\n                        },\n                        {\n                            name: \"code\",\n                            type: \"string\",\n                        },\n                        {\n                            name: \"attributes\",\n                            type: \"string\",\n                        },\n                    ],\n                    popupTemplate: {\n                        title: \"Structure Point\",\n                        expressionInfos: [\n                            {\n                                name: \"measure-roundup\",\n                                title: \"Measure Roundup\",\n                                expression: \"Round($feature.measure, 0)\",\n                            },\n                        ],\n                        content:\n                            \"<p>Point <b>{id} ({code})</b>\" +\n                            \"<ul><li>Order: {order}</li>\" +\n                            \"<li>Measure: {expression/measure-roundup} m</li>\" +\n                            \"<li>Attributes: {attributes}</li>\" +\n                            \"</ul>\",\n                    },\n                    renderer: {\n                        type: \"simple\", // autocasts as new SimpleRenderer()\n                        symbol: {\n                            type: \"simple-marker\", // autocasts as new SimpleMarkerSymbol()\n                            size: 6,\n                            color: \"red\",\n                            outline: {\n                                // autocasts as new SimpleLineSymbol()\n                                width: 0.5,\n                                color: \"white\",\n                            },\n                        },\n                    },\n                    labelingInfo: structuresLabels,\n                    title: \"Structure Points\",\n                });\n            }\n\n\n            const createOtherPointsLayer = () => {\n                const otherPointsFeatures = buildPointsFeatures(otherPoints);\n                console.log(\"other points number\", otherPointsFeatures.length);\n                return new FeatureLayer({\n                    source: otherPointsFeatures,\n                    objectIdField: \"id\",\n                    fields: [\n                        {\n                            name: \"id\",\n                            type: \"oid\",\n                        },\n                        {\n                            name: \"latitude\",\n                            type: \"double\",\n                        },\n                        {\n                            name: \"longitude\",\n                            type: \"double\",\n                        },\n                        {\n                            name: \"code\",\n                            type: \"string\",\n                        },\n                        {\n                            name: \"attributes\",\n                            type: \"string\",\n                        },\n                    ],\n                    popupTemplate: {\n                        title: \"Non-Structure Point\",\n                        content:\n                            \"<p>Point <b>{id} ({code})</b></p>\" +\n                            \"<ul><li>{attributes}</li><ul>\",\n                    },\n                    renderer: {\n                        type: \"simple\", // autocasts as new SimpleRenderer()\n                        symbol: {\n                            type: \"simple-marker\", // autocasts as new SimpleMarkerSymbol()\n                            size: 5,\n                            color: \"blue\",\n                            outline: {\n                                // autocasts as new SimpleLineSymbol()\n                                width: 0.5,\n                                color: \"white\",\n                            },\n                        },\n                    },\n                    labelingInfo: otherPointsLabels,\n                    title: \"Non-Structure Points\",\n                });\n            }\n\n            const structuresLabels = {\n                symbol: {\n                    type: \"text\",\n                    color: \"red\",\n                    haloColor: \"white\",\n                    haloSize: \"1px\",\n                    font: {\n                        size: \"16px\",\n                        family: \"Noto Sans\",\n                        style: \"italic\",\n                        weight: \"bolder\",\n                    },\n                },\n                labelPlacement: \"above-right\",\n                labelExpressionInfo: {\n                    expression: \"$feature.id + ' - ' + $feature.order\",\n                },\n                deconflictionStrategy: \"static\",\n            };\n\n            const otherPointsLabels = {\n                symbol: {\n                    type: \"text\",\n                    color: \"blue\",\n                    haloColor: \"white\",\n                    haloSize: \"1px\",\n                    font: {\n                        size: \"12px\",\n                        family: \"Noto Sans\",\n                        style: \"italic\",\n                        weight: \"bolder\",\n                    },\n                },\n                labelPlacement: \"above-right\",\n                labelExpressionInfo: {\n                    expression: \"$feature.id + ' - ' + $feature.code\",\n                },\n                deconflictionStrategy: \"static\",\n            };\n\n            const zoomToLayer = (layer) => {\n                //   console.log(`Zoom to ${layer.title}`);\n                return layer.queryExtent().then(function (response) {\n                    view.goTo(response.extent).catch(function (error) {\n                        if (error.name !== \"AbortError\") {\n                            console.error(error);\n                        }\n                    });\n                });\n            };\n\n            const structuresLayer = createStructuresPointsLayer();\n            const otherPointsLayer = createOtherPointsLayer();\n            const linesLayer = createPolylinesLayer();\n\n            linesLayer.when(function () {\n                // console.log('Zoom to line layer')\n                zoomToLayer(linesLayer);\n            });\n\n            const map = new Map({\n                basemap: \"hybrid\",\n                layers: [linesLayer, otherPointsLayer, structuresLayer],\n            });\n\n            const view = new MapView({\n                container: \"viewDiv\",\n                center: [-168, 46],\n                zoom: 2,\n                map: map,\n                // set highlightOptions like color and fillOpacity\n                highlightOptions: {\n                    color: [255, 255, 0, 1],\n                    haloOpacity: 0.9,\n                    fillOpacity: 0.4,\n                },\n            });\n\n            const createActions = (event) => {\n                const item = event.item;\n                //   console.log(\"item\", item);\n\n                if (item.title.includes(\"Profile\")) {\n                    item.actionsOpen = false;\n                    item.actionsSections = [\n                        [\"All\", ...Object.keys(profileInfoDict)].map((profileNo) => {\n                            // console.log(\"profile detail\", profileInfoDict[profileNo]);\n                            let profileLength;\n                            if (profileNo === \"All\") {\n                                profileLength = Object.keys(profileInfoDict)\n                                    .map((profileNo) => profileInfoDict[profileNo].profileLength)\n                                    .reduce((a, b) => a + b);\n                            } else {\n                                profileLength = profileInfoDict[profileNo].profileLength;\n                            }\n                            return {\n                                title: `Profile ${profileNo} - ${profileLength} m`,\n                                className: \"esri-icon-zoom-out-fixed\",\n                                id: profileNo,\n                            };\n                        }),\n                    ];\n                }\n            }\n            const layerList = new LayerList({\n                view: view,\n                listItemCreatedFunction: createActions,\n                container: \"layerListDiv\",\n            });\n            view.ui.add(layerList, \"top-right\");\n\n            // definitionExpressions used by each action\n            // listed in the LayerList\n\n            const profileExpressions = new Collection(\n                [\"All\", ...Object.keys(profileInfoDict)].map((profileNo) => ({\n                    id: profileNo,\n                    expression: `objectID = '${profileNo}'`,\n                }))\n            );\n\n            // When an action is triggered, the definitionExpression\n            // is set on the layer and the view's extent updates\n            // to match the features visible in the layer\n\n            const queryProfile = linesLayer.createQuery();\n            view.whenLayerView(linesLayer).then((layerView) => {\n                const fullExtent = linesLayer.fullExtent;\n                layerList.on(\"trigger-action\", (event) => {\n                    const actionId = event.action.id;\n                    const layer = event.item.layer;\n\n                    const queryExpression = profileExpressions.find((item) => {\n                        return item.id === actionId;\n                    }).expression;\n                    // console.log(\"Expression: \", queryExpression);\n\n                    if (!queryExpression.includes(\"All\")) {\n                        queryProfile.where = queryExpression;\n                        layer.queryFeatures(queryProfile).then((result) => {\n                            // the feature to be highlighted\n                            const feature = result.features[0];\n\n                            const ext = feature.geometry.extent;\n                            const cloneExt = ext.clone();\n                            // center the feature\n                            view\n                                .goTo(\n                                    {\n                                        target: feature.geometry,\n                                        extent: cloneExt.expand(1.5),\n                                    },\n                                    {\n                                        duration: 2000,\n                                        easing: \"in-out-expo\",\n                                    }\n                                )\n                                .catch((error) => {\n                                    if (error.name !== \"AbortError\") {\n                                        console.log(error);\n                                    }\n                                });\n                        });\n                    } else {\n                        view\n                            .goTo(\n                                {\n                                    target: fullExtent,\n                                },\n                                {\n                                    duration: 2000,\n                                    easing: \"in-out-expo\",\n                                }\n                            )\n                            .catch((error) => {\n                                if (error.name !== \"AbortError\") {\n                                    console.log(error);\n                                }\n                            });\n                    }\n                });\n            });\n\n\n            const coordsWidget = document.createElement(\"div\");\n            coordsWidget.id = \"coordsWidget\";\n            coordsWidget.className = \"esri-widget esri-component\";\n            coordsWidget.style.padding = \"7px 15px 5px\";\n\n            view.ui.add(coordsWidget, \"bottom-left\");\n\n            const showCoordinates = (pt) => {\n                const coords =\n                    \"Lat/Lon \" +\n                    pt.latitude.toFixed(3) +\n                    \" \" +\n                    pt.longitude.toFixed(3) +\n                    \" | Scale 1:\" +\n                    Math.round(view.scale * 1) / 1 +\n                    \" | Zoom \" +\n                    view.zoom;\n                coordsWidget.innerHTML = coords;\n            };\n\n            view.watch(\"stationary\", function (isStationary) {\n                showCoordinates(view.center);\n            });\n\n            view.on(\"pointer-move\", function (evt) {\n                showCoordinates(view.toMap({x: evt.x, y: evt.y}));\n            });\n\n        } catch (e) {\n            console.error(e);\n        }\n    };\n\n    useEffect(() => {\n        console.log(`Map get data: ${(new Date()).toLocaleTimeString()}`, data)\n        if (data && data.length > 0) {\n            const layerListDiv = document.getElementById(\"layerListDiv\")\n            if (layerListDiv) {\n                layerListDiv.innerHTML = ''\n            }\n            loadData(data);\n        }\n    }, [data]);\n\n    return (\n        <div id=\"contentDiv\" className={classes.contentDiv}>\n            <div id=\"viewDiv\" className={classes.viewDiv}/>\n            {data &&\n            <div id=\"layerListDiv\" className={classes.layerListDiv}/>\n            }\n        </div>\n    );\n\n};\n\nexport default MyMap;\n","import React, {useContext} from 'react'\n\nimport {CSVReader} from 'react-papaparse'\nimport {DataContext} from \"./context/data-context\";\n\nconst MyDropZone = () => {\n    const [, setData] = useContext(DataContext)\n    const handleOnDrop = (data) => {\n        // console.log('values: ', Object.values(data))\n        const dataValues = Object.values(data)\n            .filter(item => !!item)\n            .map(item => {\n                    const obj = item.data\n                    if (item.data.order && item.data.order.length > 0) {\n                        return {\n                            id: obj.id,\n                            code: obj.code,\n                            profile: obj.profile,\n                            order: obj.order,\n                            longitude: parseFloat(obj.longitude),\n                            latitude: parseFloat(obj.latitude),\n                            measure: parseFloat(obj.measure),\n                            attributes: obj.attributes,\n                        }\n\n                    } else {\n\n                        return {\n                            id: obj.id,\n                            code: obj.code,\n                            longitude: parseFloat(obj.longitude),\n                            latitude: parseFloat(obj.latitude),\n                            attributes: obj.attributes,\n                        }\n                    }\n                }\n            )\n        // console.log('Read as: ', dataValues)\n        setData(dataValues)\n    }\n\n    const handleOnError = (err, file, inputElem, reason) => {\n        console.log(err)\n    }\n\n    const handleOnRemoveFile = (data) => {\n    }\n\n    return (\n        <CSVReader\n            onDrop={handleOnDrop}\n            onError={handleOnError}\n            addRemoveButton\n            removeButtonColor='#659cef'\n            onRemoveFile={handleOnRemoveFile}\n            config={{header: true}}\n        >\n            <span>Drop CSV file here or click to upload.</span>\n        </CSVReader>\n    )\n}\n\nexport default MyDropZone","import React from \"react\";\nimport MyMap from \"./MyMapZoom\"\nimport MyDropZone from \"./UploadButton\"\nimport {DataContextProvider} from \"./context/data-context\";\n\nconst App = () => {\n    return (\n        <div style={{width: '95%', height: '100%', margin: \"auto\"}}>\n            <DataContextProvider>\n                <MyDropZone/>\n                <MyMap/>\n            </DataContextProvider>\n        </div>\n    );\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}