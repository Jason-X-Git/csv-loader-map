{"version":3,"sources":["context/data-context.js","MyMapZoom.js","UploadButton.js","DataTable.js","DataPanel.js","App.js","reportWebVitals.js","index.js"],"names":["DataContext","createContext","DataContextProvider","props","useState","csvValues","undefined","sortedStructures","data","setData","Provider","value","children","randomcolor","require","useStyles","makeStyles","theme","viewDiv","width","height","contentDiv","margin","layerListDiv","fontSize","padding","MyMap","classes","useContext","loadData","a","options","url","css","loadModules","Map","MapView","FeatureLayer","Point","Polyline","Graphic","LayerList","Collection","Home","array","profileInfoDict","length","structurePoints","filter","pt","order","latitude","longitude","sort","b","profile","parseInt","otherPoints","profileNoList","map","s","index","self","indexOf","randomColors","luminosity","count","hue","colorDict","forEach","profileNo","i","console","log","buildPointsFeatures","points","features","item","attr","id","mark","structureAngles","measure","code","attributes","geometry","graphic","push","groupedByProfile","key","reduce","objectsByKeyValue","obj","concat","groupBy","profileDict","Object","keys","d","pointsSorted","pointsCount","profileLength","Math","round","buildLines","pointsCoordinates","linesArray","hasZ","hasM","paths","spatialReference","wkid","lineRenderer","type","field","uniqueValueInfos","label","symbol","symbolLayers","enable","color","size","markerPlacement","endings","placementTemplate","angleToLine","frame","xmin","ymin","xmax","ymax","markerGraphics","rings","createPolylinesLayer","source","objectIdField","fields","name","popupTemplate","title","content","renderer","createStructuresPointsLayer","structuresFeatures","expressionInfos","expression","outline","labelingInfo","structuresLabels","createOtherPointsLayer","otherPointsFeatures","otherPointsLabels","haloColor","haloSize","font","family","style","weight","labelPlacement","labelExpressionInfo","deconflictionStrategy","zoomToLayer","layer","queryExtent","then","response","view","goTo","extent","catch","error","structuresLayer","otherPointsLayer","linesLayer","when","basemap","layers","container","center","zoom","highlightOptions","haloOpacity","fillOpacity","layerList","listItemCreatedFunction","event","includes","actionsOpen","actionsSections","className","ui","add","profileExpressions","structureExpressions","queryProfile","createQuery","queryStructure","whenLayerView","layerView","fullExtent","homeBtn","goToOverride","target","duration","easing","on","queryExpression","queryFunc","actionId","action","find","where","queryFeatures","result","feature","cloneExt","clone","expand","coordsWidget","document","createElement","showCoordinates","coords","toFixed","scale","innerHTML","watch","isStationary","evt","toMap","x","y","useEffect","Date","toLocaleTimeString","getElementById","MyDropZone","onDrop","dataValues","values","struc_mark","struc_angles","parseFloat","onError","err","file","inputElem","reason","addRemoveButton","removeButtonColor","onRemoveFile","config","header","table","body","StyledTableCell","withStyles","root","background","TableCell","StyledTableHeaderCell","BasicTable","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","align","TableBody","scope","DataPanel","display","justifyContent","border","opacity","overflow","default","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9ab47d88.chunk.js","sourcesContent":["import React, {useState, createContext} from \"react\";\n\nexport const DataContext = createContext()\n\nexport const DataContextProvider = props => {\n    const [data, setData] = useState({\n        csvValues: undefined,\n        sortedStructures: undefined\n    })\n    return (\n        <DataContext.Provider value={[data, setData]}>\n            {props.children}\n        </DataContext.Provider>\n    )\n}","import React, {useContext, useEffect} from \"react\";\nimport {loadModules} from \"esri-loader\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {DataContext} from \"./context/data-context\";\n\nconst randomcolor = require(\"randomcolor\");\n\nconst useStyles = makeStyles((theme) => ({\n    viewDiv: {\n        width: \"100wh\",\n        height: \"90vh\",\n    },\n    contentDiv: {\n        width: \"100wh\",\n        height: \"90vh\",\n        margin: \"10px 5px\",\n    },\n    layerListDiv: {\n        width: \"200px\",\n        fontSize: \"6px\",\n        padding: 0,\n    },\n}));\n\nconst MyMap = () => {\n    const classes = useStyles();\n\n    // const data = readJSON()\n    const [data, setData] = useContext(DataContext)\n\n    const csvValues = data.csvValues\n\n    const loadData = async (csvValues) => {\n        try {\n            const options = {\n                url: \"https://js.arcgis.com/4.18/init.js\",\n                css: \"https://js.arcgis.com/4.18/esri/themes/light/main.css\",\n            };\n            const [\n                Map,\n                MapView,\n                FeatureLayer,\n                Point,\n                Polyline,\n                Graphic,\n                LayerList,\n                Collection,\n                Home,\n                array,\n            ] = await loadModules(\n                [\n                    \"esri/Map\",\n                    \"esri/views/MapView\",\n                    \"esri/layers/FeatureLayer\",\n                    \"esri/geometry/Point\",\n                    \"esri/geometry/Polyline\",\n                    \"esri/Graphic\",\n                    \"esri/widgets/LayerList\",\n                    \"esri/core/Collection\",\n                    \"esri/widgets/Home\",\n                    \"dojo/_base/array\",\n                    \"dojo/domReady!\",\n                ],\n                options\n            );\n            let map;\n            let view;\n            const profileInfoDict = {};\n            let linesLayer\n\n            if (csvValues && csvValues.length > 0) {\n                const structurePoints = csvValues.filter(pt => !!pt.order && pt.latitude && pt.longitude)\n                    .sort((a, b) => {\n                            if (a.profile === b.profile) {\n                                return parseInt(a.order) < parseInt(b.order) ? -1 : 1;\n                            } else {\n                                return parseInt(a.profile) < parseInt(b.profile) ? -1 : 1;\n                            }\n                        }\n                    );\n                setData({\n                    ...data,\n                    sortedStructures: structurePoints,\n                })\n                const otherPoints = csvValues.filter(pt => !pt.order && pt.latitude && pt.longitude)\n                const profileNoList = structurePoints.map(s => s.profile)\n                    .filter((value, index, self) => self.indexOf(value) === index)\n                const randomColors = randomcolor({\n                    luminosity: \"bright\",\n                    count: profileNoList.length,\n                    hue: \"red\"\n                })\n                const colorDict = {}\n                profileNoList.forEach((profileNo, i) => {\n                    colorDict[profileNo] = randomColors[i]\n                })\n                console.log('Colors: ', colorDict)\n                console.log('Structure Data: ', 'data length: ', structurePoints.length, 'sample: ', structurePoints[0])\n                console.log('Other Data: ', 'data length: ', otherPoints.length, 'sample: ', otherPoints[0])\n                //   const structureIDList = structurePoints.map((pt) => pt.id);\n\n\n                const buildPointsFeatures = (points) => {\n                    //loop through the items and add to the feature layer\n                    const features = [];\n                    array.forEach(points, function (item) {\n                        // console.log(\"item\", item);\n                        const attr = {};\n                        //pull in any additional attributes if required\n                        attr[\"id\"] = item.id;\n                        if (item.order) {\n                            attr[\"mark\"] = item.mark;\n                            attr[\"profile\"] = item.profile;\n                            attr[\"order\"] = item.order;\n                            attr[\"structureAngles\"] = item.structureAngles;\n                            attr[\"measure\"] = item.measure;\n                        }\n                        attr[\"longitude\"] = item.longitude;\n                        attr[\"latitude\"] = item.latitude;\n                        attr[\"code\"] = item.code;\n                        attr[\"attributes\"] = item.attributes;\n\n                        const geometry = new Point(item.longitude, item.latitude);\n\n                        const graphic = new Graphic({\n                            geometry: geometry,\n                            attributes: attr,\n                        });\n                        features.push(graphic);\n                    });\n\n                    //   console.log(\"retrieved \", features.length, \" points\");\n                    return features;\n                }\n\n\n                const groupBy = (key) => (array) =>\n                    array.reduce((objectsByKeyValue, obj) => {\n                        const value = obj[key];\n                        objectsByKeyValue[value] = (objectsByKeyValue[value] || []).concat(\n                            obj\n                        );\n                        return objectsByKeyValue;\n                    }, {});\n\n                const groupedByProfile = groupBy(\"profile\");\n                const profileDict = groupedByProfile(structurePoints);\n                // console.log('profile dict', profileDict)\n                Object.keys(profileDict).map((profileNo) => {\n                    let d = {\n                        pointsSorted: profileDict[profileNo].sort((a, b) =>\n                            parseInt(a.order) < parseInt(b.order) ? -1 : 1\n                        ),\n                        pointsCount: profileDict[profileNo].length,\n                    };\n                    const profileLength = Math.round(\n                        d.pointsSorted[d.pointsCount - 1].measure,\n                        0\n                    );\n                    d = {profileLength, ...d};\n                    profileInfoDict[profileNo] = d;\n                });\n\n                // console.log(\"profile sorted dict\", profileInfoDict);\n\n                const buildLines = () => {\n                    //   console.log('grouped', profilePoints)\n                    const linesArray = [];\n                    let pointsCoordinates;\n                    let points;\n                    Object.keys(profileInfoDict).map((profileNo) => {\n                        points = profileInfoDict[profileNo].pointsSorted;\n                        // console.log(\"Profile \", profileNo, points);\n                        pointsCoordinates = [];\n                        points.map((pt) =>\n                            pointsCoordinates.push([pt.longitude, pt.latitude])\n                        );\n                        const geometry = new Polyline({\n                            hasZ: false,\n                            hasM: true,\n                            paths: pointsCoordinates,\n                            spatialReference: {wkid: 4326},\n                        });\n                        const attr = {};\n                        attr[\"objectID\"] = profileNo;\n                        attr[\"count\"] = points.length;\n                        attr[\"length\"] = points[points.length - 1].measure;\n                        const graphic = new Graphic({\n                            geometry: geometry,\n                            attributes: attr,\n                        });\n                        linesArray.push(graphic);\n                    });\n                    //   console.log(\"build lines: \", linesArray.length);\n\n                    const createLineSymbol = (value, color) => {\n                        // color parameter could be used to render different color, but now not used.\n                        return {\n                            value: value,\n                            label: value,\n                            symbol: {\n                                type: \"cim\", // autocasts as CIMSymbol\n                                data: {\n                                    type: \"CIMSymbolReference\",\n                                    symbol: {\n                                        type: \"CIMLineSymbol\",\n                                        symbolLayers: [{\n                                            // black 1px line symbol\n                                            type: \"CIMSolidStroke\",\n                                            enable: true,\n                                            width: 3,\n                                            color: [240, 94, 35, 255]\n                                        },\n                                            {\n                                                // arrow symbol\n                                                type: \"CIMVectorMarker\",\n                                                enable: true,\n                                                size: 10,\n                                                markerPlacement: {\n                                                    type: \"CIMMarkerPlacementAlongLineSameSize\", // places same size markers along the line\n                                                    endings: \"WithMarkers\",\n                                                    placementTemplate: [30], // determines space between each arrow\n                                                    angleToLine: true // symbol will maintain its angle to the line when map is rotated\n                                                },\n                                                frame: {\n                                                    xmin: -5,\n                                                    ymin: -5,\n                                                    xmax: 5,\n                                                    ymax: 5\n                                                },\n                                                markerGraphics: [{\n                                                    type: \"CIMMarkerGraphic\",\n                                                    geometry: {\n                                                        rings: [\n                                                            [\n                                                                [-8, -5.47],\n                                                                [-8, 5.6],\n                                                                [1.96, -0.03],\n                                                                [-8, -5.47]\n                                                            ]\n                                                        ]\n                                                    },\n                                                    symbol: {\n                                                        // black fill for the arrow symbol\n                                                        type: \"CIMPolygonSymbol\",\n                                                        symbolLayers: [{\n                                                            type: \"CIMSolidFill\",\n                                                            enable: true,\n                                                            color: [240, 94, 35, 255]\n                                                        }]\n                                                    }\n                                                }]\n                                            }]\n                                    }\n                                }\n                            }\n\n                        };\n                    };\n\n                    const lineRenderer = {\n                        type: \"unique-value\",\n                        field: \"objectID\",\n                        uniqueValueInfos: Object.keys(profileInfoDict).map((profileNo) =>\n                            createLineSymbol(\n                                profileNo,\n                                colorDict[profileNo]\n                            )\n                        ),\n                    };\n\n                    return [linesArray, lineRenderer];\n                };\n\n                const createPolylinesLayer = () => {\n                    const [linesArray, lineRenderer] = buildLines();\n                    //   console.log(\"line arrays\", linesArray);\n                    //   console.log(\"line render\", lineRenderer);\n                    return new FeatureLayer({\n                        source: linesArray,\n                        objectIdField: \"objectID\",\n                        fields: [\n                            {\n                                name: \"objectID\",\n                                type: \"oid\",\n                            },\n                            {\n                                name: \"count\",\n                                type: \"integer\",\n                            },\n                            {\n                                name: \"length\",\n                                type: \"double\",\n                            },\n                        ],\n                        popupTemplate: {\n                            title: \"Profile\",\n                            content: \"Profile {objectID} - {count} structures - {length} m\",\n                        },\n                        renderer: lineRenderer,\n                        title: \"Profiles\",\n                    });\n                }\n\n                //  Creates a client-side FeatureLayer from an array of graphics\n                const createStructuresPointsLayer = () => {\n                    const structuresFeatures = buildPointsFeatures(structurePoints);\n                    //   console.log(\"points list\", structuresFeatures);\n\n                    const createColorSymbol = (value) => ({\n                        value: value,\n                        symbol: {\n                            type: \"simple-marker\", // autocasts as new SimpleMarkerSymbol()\n                            size: 8,\n                            color: colorDict[value],\n                            outline: {\n                                // autocasts as new SimpleLineSymbol()\n                                width: 1.5,\n                                color: \"white\",\n                            },\n                        },\n                        label: value\n                    })\n                    return new FeatureLayer({\n                        source: structuresFeatures,\n                        objectIdField: \"id\",\n                        fields: [\n                            {\n                                name: \"id\",\n                                type: \"oid\",\n                            },\n                            {\n                                name: \"profile\",\n                                type: \"string\",\n                            },\n                            {\n                                name: \"order\",\n                                type: \"string\",\n                            },\n                            {\n                                name: \"structureAngles\",\n                                type: \"string\",\n                            },\n                            {\n                                name: \"latitude\",\n                                type: \"double\",\n                            },\n                            {\n                                name: \"longitude\",\n                                type: \"double\",\n                            },\n                            {\n                                name: \"measure\",\n                                type: \"double\",\n                            },\n                            {\n                                name: \"code\",\n                                type: \"string\",\n                            },\n                            {\n                                name: \"mark\",\n                                type: \"string\",\n                            },\n                            {\n                                name: \"attributes\",\n                                type: \"string\",\n                            },\n                        ],\n                        popupTemplate: {\n                            title: \"Structure Point\",\n                            expressionInfos: [\n                                {\n                                    name: \"measure-roundup\",\n                                    title: \"Measure Roundup\",\n                                    expression: \"Round($feature.measure, 2)\",\n                                },\n                            ],\n                            content:\n                                \"<div>\" +\n                                \"<h3>Point {mark}{order} - Profile{profile} - {id} - {code}</h3>\" +\n                                \"<ul>\" +\n                                \"<li>Measure: {expression/measure-roundup} m</li>\" +\n                                \"<li>StructureAngles: {structureAngles}</li>\" +\n                                \"<li>Attributes: {attributes}</li>\" +\n                                \"</ul>\" +\n                                \"</div>\",\n                        },\n\n                        renderer: {\n                            type: \"unique-value\",\n                            field: \"profile\",\n                            uniqueValueInfos: profileNoList.map(profileNo => createColorSymbol(profileNo))\n                        },\n                        labelingInfo: structuresLabels,\n                        title: \"Structure Points\",\n                    });\n                }\n\n\n                const createOtherPointsLayer = () => {\n                    const otherPointsFeatures = buildPointsFeatures(otherPoints);\n                    console.log(\"other points number\", otherPointsFeatures.length);\n                    return new FeatureLayer({\n                        source: otherPointsFeatures,\n                        objectIdField: \"id\",\n                        fields: [\n                            {\n                                name: \"id\",\n                                type: \"oid\",\n                            },\n                            {\n                                name: \"latitude\",\n                                type: \"double\",\n                            },\n                            {\n                                name: \"longitude\",\n                                type: \"double\",\n                            },\n                            {\n                                name: \"code\",\n                                type: \"string\",\n                            },\n                            {\n                                name: \"attributes\",\n                                type: \"string\",\n                            },\n                        ],\n                        popupTemplate: {\n                            title: \"Non-Structure Point\",\n                            content:\n                                \"<p>Point <b>{id} ({code})</b></p>\" +\n                                \"<ul><li>{attributes}</li><ul>\",\n                        },\n                        renderer: {\n                            type: \"simple\", // autocasts as new SimpleRenderer()\n                            symbol: {\n                                type: \"simple-marker\", // autocasts as new SimpleMarkerSymbol()\n                                size: 5,\n                                color: \"blue\",\n                                outline: {\n                                    // autocasts as new SimpleLineSymbol()\n                                    width: 0.5,\n                                    color: \"white\",\n                                },\n                            },\n                        },\n                        labelingInfo: otherPointsLabels,\n                        title: \"Non-Structure Points\",\n                    });\n                }\n\n                const structuresLabels = {\n                    symbol: {\n                        type: \"text\",\n                        color: \"red\",\n                        haloColor: \"white\",\n                        haloSize: \"1.5px\",\n                        font: {\n                            size: \"18px\",\n                            family: \"Noto Sans\",\n                            style: \"italic\",\n                            weight: \"bolder\",\n                        },\n                    },\n                    labelPlacement: \"above-right\",\n                    labelExpressionInfo: {\n                        expression: \"'P' + $feature.profile + '-' + $feature.mark[0] + '' + $feature.order\",\n                    },\n                    deconflictionStrategy: \"static\",\n                };\n\n                const otherPointsLabels = {\n                    symbol: {\n                        type: \"text\",\n                        color: \"blue\",\n                        haloColor: \"white\",\n                        haloSize: \"1px\",\n                        font: {\n                            size: \"15px\",\n                            family: \"Noto Sans\",\n                            style: \"italic\",\n                            weight: \"bolder\",\n                        },\n                    },\n                    labelPlacement: \"above-right\",\n                    labelExpressionInfo: {\n                        expression: \"$feature.id + ' - ' + $feature.code\",\n                    },\n                    deconflictionStrategy: \"static\",\n                };\n\n                const zoomToLayer = (layer) => {\n                    //   console.log(`Zoom to ${layer.title}`);\n                    return layer.queryExtent().then(function (response) {\n                        view.goTo(response.extent).catch(function (error) {\n                            if (error.name !== \"AbortError\") {\n                                console.error(error);\n                            }\n                        });\n                    });\n                };\n\n                const structuresLayer = createStructuresPointsLayer();\n                const otherPointsLayer = createOtherPointsLayer();\n                linesLayer = createPolylinesLayer();\n\n                linesLayer.when(function () {\n                    console.log('Zoom to line layer')\n                    zoomToLayer(linesLayer);\n                })\n\n                map = new Map({\n                    basemap: \"hybrid\",\n                    layers: [linesLayer, otherPointsLayer, structuresLayer],\n                });\n                view = new MapView({\n                    container: \"viewDiv\",\n                    center: [-168, 46],\n                    zoom: 2,\n                    map: map,\n                    // set highlightOptions like color and fillOpacity\n                    highlightOptions: {\n                        color: [255, 255, 0, 1],\n                        haloOpacity: 0.9,\n                        fillOpacity: 0.4,\n                    },\n                });\n\n\n                const createActions = (event) => {\n                    const item = event.item;\n                    //   console.log(\"item\", item);\n\n                    if (item.title.includes(\"Profile\")) {\n                        item.actionsOpen = true;\n                        item.actionsSections = [\n                            [\"All\", ...Object.keys(profileInfoDict)].map((profileNo) => {\n                                // console.log(\"profile detail\", profileInfoDict[profileNo]);\n                                let profileLength;\n                                if (profileNo === \"All\") {\n                                    profileLength = Object.keys(profileInfoDict)\n                                        .map((profileNo) => profileInfoDict[profileNo].profileLength)\n                                        .reduce((a, b) => a + b);\n                                } else {\n                                    profileLength = profileInfoDict[profileNo].profileLength;\n                                }\n                                return {\n                                    title: `Profile ${profileNo} - ${profileLength} m`,\n                                    className: \"esri-icon-zoom-out-fixed\",\n                                    id: profileNo,\n                                };\n                            }),\n                        ];\n                    } else if (item.title === 'Structure Points') {\n                        item.actionsOpen = false;\n                        item.actionsSections = [\n                            structurePoints.map(pt => {\n                                return {\n                                    title: `P${pt.profile}-${pt.mark[0]}${pt.order}-${pt.id}\n                                    ${pt.structureAngles.includes('running')? \"-Running\":\"\"}\n                                    ${pt.structureAngles.includes('tap')? \"-Tap\":\"\"}`,\n                                    className: \"esri-icon-zoom-out-fixed\",\n                                    id: `${pt.id}`,\n                                }\n                            })\n                        ]\n\n                    }\n                }\n                const layerList = new LayerList({\n                    view: view,\n                    listItemCreatedFunction: createActions,\n                    container: \"layerListDiv\",\n                });\n                view.ui.add(layerList, \"top-right\");\n\n                // definitionExpressions used by each action\n                // listed in the LayerList\n\n                const profileExpressions = new Collection(\n                    [\"All\", ...Object.keys(profileInfoDict)].map((profileNo) => ({\n                        id: profileNo,\n                        expression: `objectID = '${profileNo}'`,\n                    }))\n                );\n                const structureExpressions = new Collection(\n                    structurePoints.map((pt) => ({\n                        id: pt.id,\n                        expression: `id = '${pt.id}'`,\n                    }))\n                );\n\n                // When an action is triggered, the definitionExpression\n                // is set on the layer and the view's extent updates\n                // to match the features visible in the layer\n\n                const queryProfile = linesLayer.createQuery();\n                const queryStructure = structuresLayer.createQuery();\n                view.whenLayerView(linesLayer).then((layerView) => {\n                    const fullExtent = linesLayer.fullExtent;\n                    const homeBtn = new Home({\n                        view: view,\n                    });\n                    homeBtn.goToOverride = () => {\n                        view.goTo(\n                            {\n                                target: fullExtent,\n                            },\n                            {\n                                duration: 2000,\n                                easing: \"in-out-expo\",\n                            }\n                        )\n                            .catch((error) => {\n                                if (error.name !== \"AbortError\") {\n                                    console.log(error);\n                                }\n                            });\n                    }\n                    view.ui.add(homeBtn, \"top-left\");\n                    layerList.on(\"trigger-action\", (event) => {\n                        const actionId = event.action.id;\n                        const layer = event.item.layer;\n\n                        let queryExpression;\n                        let queryFunc;\n                        if (event.item.title.includes('Profile')) {\n                            queryExpression = profileExpressions.find((item) => {\n                                return item.id === actionId;\n                            }).expression;\n                            queryFunc = queryProfile\n                        } else {\n                            queryExpression = structureExpressions.find((item) => {\n                                return item.id === actionId;\n                            }).expression;\n                            queryFunc = queryStructure\n                        }\n                        // console.log(\"Expression: \", queryExpression);\n\n                        if (!queryExpression.includes(\"All\")) {\n                            queryFunc.where = queryExpression;\n                            layer.queryFeatures(queryFunc).then((result) => {\n                                // the feature to be highlighted\n                                const feature = result.features[0];\n\n                                console.log('type', feature.geometry.type)\n                                if (feature.geometry.type === 'point') {\n                                    view.goTo(\n                                        {\n                                            target: feature.geometry,\n                                            zoom: 20,\n                                        },\n                                        {\n                                            duration: 2000,\n                                            easing: \"in-out-expo\",\n                                        }\n                                    )\n                                        .catch((error) => {\n                                            if (error.name !== \"AbortError\") {\n                                                console.log(error);\n                                            }\n                                        });\n                                } else {\n                                    const ext = feature.geometry.extent;\n\n                                    const cloneExt = ext.clone();\n                                    // center the feature\n                                    view.goTo(\n                                        {\n                                            target: feature.geometry,\n                                            extent: cloneExt.expand(1.5),\n                                        },\n                                        {\n                                            duration: 2000,\n                                            easing: \"in-out-expo\",\n                                        }\n                                    )\n                                        .catch((error) => {\n                                            if (error.name !== \"AbortError\") {\n                                                console.log(error);\n                                            }\n                                        });\n                                }\n                            });\n                        } else {\n                            view.goTo(\n                                {\n                                    target: fullExtent,\n                                },\n                                {\n                                    duration: 2000,\n                                    easing: \"in-out-expo\",\n                                }\n                            )\n                                .catch((error) => {\n                                    if (error.name !== \"AbortError\") {\n                                        console.log(error);\n                                    }\n                                });\n                        }\n                    });\n                });\n\n            } else {\n                map = new Map({\n                    basemap: \"hybrid\",\n                });\n                view = new MapView({\n                    container: \"viewDiv\",\n                    center: [-116, 54],\n                    zoom: 6,\n                    map: map,\n                    // set highlightOptions like color and fillOpacity\n                    highlightOptions: {\n                        color: [255, 255, 0, 1],\n                        haloOpacity: 0.9,\n                        fillOpacity: 0.4,\n                    },\n                });\n            }\n\n\n            const coordsWidget = document.createElement(\"div\");\n            coordsWidget.id = \"coordsWidget\";\n            coordsWidget.className = \"esri-widget esri-component\";\n            coordsWidget.style.padding = \"7px 15px 5px\";\n\n            view.ui.add(coordsWidget, \"bottom-left\");\n\n            const showCoordinates = (pt) => {\n                const coords =\n                    \"Lat/Lon \" +\n                    pt.latitude.toFixed(3) +\n                    \" \" +\n                    pt.longitude.toFixed(3) +\n                    \" | Scale 1:\" +\n                    Math.round(view.scale * 1) / 1 +\n                    \" | Zoom \" +\n                    view.zoom;\n                coordsWidget.innerHTML = coords;\n            };\n\n            view.watch(\"stationary\", function (isStationary) {\n                showCoordinates(view.center);\n            });\n\n            view.on(\"pointer-move\", function (evt) {\n                showCoordinates(view.toMap({x: evt.x, y: evt.y}));\n            });\n\n        } catch (e) {\n            console.error(e);\n        }\n    };\n\n    useEffect(() => {\n        console.log(`Map get data: ${(new Date()).toLocaleTimeString()}`, csvValues)\n\n        const layerListDiv = document.getElementById(\"layerListDiv\")\n        if (layerListDiv) {\n            layerListDiv.innerHTML = ''\n        }\n        loadData(csvValues);\n    }, [csvValues]);\n\n    return (\n        <div id=\"contentDiv\" className={classes.contentDiv}>\n            <div id=\"viewDiv\" className={classes.viewDiv}/>\n            {csvValues &&\n            <div id=\"layerListDiv\" className={classes.layerListDiv}/>\n            }\n        </div>\n    );\n\n};\n\nexport default MyMap;\n","import React, {useContext} from 'react'\n\nimport {CSVReader} from 'react-papaparse'\nimport {DataContext} from \"./context/data-context\";\n\nconst MyDropZone = () => {\n    const [data, setData] = useContext(DataContext)\n    const handleOnDrop = (data) => {\n        // console.log('values: ', Object.values(data))\n        const dataValues = Object.values(data)\n            .filter(item => !!item)\n            .map(item => {\n                    const obj = item.data\n                    if (item.data.order) {\n                        return {\n                            id: obj.id,\n                            code: obj.code,\n                            mark: obj.struc_mark,\n                            profile: obj.profile,\n                            order: obj.order,\n                            structureAngles: obj.struc_angles,\n                            longitude: parseFloat(obj.longitude),\n                            latitude: parseFloat(obj.latitude),\n                            measure: parseFloat(obj.measure),\n                            attributes: obj.attributes,\n                        }\n\n                    } else {\n\n                        return {\n                            id: obj.id,\n                            code: obj.code,\n                            longitude: parseFloat(obj.longitude),\n                            latitude: parseFloat(obj.latitude),\n                            attributes: obj.attributes,\n                        }\n                    }\n                }\n            )\n        // console.log('Read as: ', dataValues)\n        setData({\n            ...data,\n            csvValues: dataValues\n        })\n    }\n\n    const handleOnError = (err, file, inputElem, reason) => {\n        console.log(err)\n    }\n\n    const handleOnRemoveFile = (data) => {\n    }\n\n    return (\n        <CSVReader\n            onDrop={handleOnDrop}\n            onError={handleOnError}\n            addRemoveButton\n            removeButtonColor='#659cef'\n            onRemoveFile={handleOnRemoveFile}\n            config={{header: true}}\n        >\n            <span>Drop CSV file here or click to upload.</span>\n        </CSVReader>\n    )\n}\n\nexport default MyDropZone","import React, {useContext} from 'react';\nimport {makeStyles, withStyles} from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport {DataContext} from \"./context/data-context\";\nimport {blueGrey} from \"@material-ui/core/colors\";\n\n\nconst useStyles = makeStyles({\n    table: {},\n    body: {\n        // width: 700,\n    },\n    header: {\n        // width: 700,\n        // headerStyle: {position: 'sticky', top: 0},\n    },\n});\n\nconst StyledTableCell = withStyles({\n    root: {\n        color: \"black\",\n        background: \"whitesmoke\",\n        fontSize: 16,\n    }\n})(TableCell);\n\nconst StyledTableHeaderCell = withStyles({\n    root: {\n        color: \"white\",\n        background: \"slateblue\",\n        fontSize: 18,\n    }\n})(TableCell);\n\nexport default function BasicTable() {\n    const [data] = useContext(DataContext)\n    const structurePoints = data.sortedStructures;\n\n    const classes = useStyles();\n\n    return (\n        <TableContainer component={Paper}>\n            <Table className={classes.table} aria-label=\"simple table\">\n                <TableHead className={classes.header}>\n                    <TableRow>\n                        <StyledTableHeaderCell align=\"middle\">Profile</StyledTableHeaderCell>\n                        <StyledTableHeaderCell align=\"middle\">STR#</StyledTableHeaderCell>\n                        <StyledTableHeaderCell align=\"middle\">Code</StyledTableHeaderCell>\n                        <StyledTableHeaderCell align=\"middle\">Measure&nbsp;(m)</StyledTableHeaderCell>\n                        <StyledTableHeaderCell align=\"middle\">Angles</StyledTableHeaderCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody className={classes.body}>\n                    {structurePoints && structurePoints.map((pt) => (\n                        <TableRow key={pt.id}>\n                            <StyledTableCell component=\"th\" scope=\"row\" align=\"middle\">\n                                {pt.profile}\n                            </StyledTableCell>\n                            <StyledTableCell align=\"middle\">{pt.mark}{pt.order}</StyledTableCell>\n                            <StyledTableCell align=\"middle\">{pt.code}</StyledTableCell>\n                            <StyledTableCell align=\"middle\">{pt.measure}</StyledTableCell>\n                            <StyledTableCell align=\"middle\">{pt.structureAngles}</StyledTableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n","import React, {useContext} from \"react\";\nimport {Rnd} from \"react-rnd\"\nimport DataTable from \"./DataTable\"\nimport {DataContext} from \"./context/data-context\";\n\n\nconst DataPanel = () => {\n    const [data] = useContext(DataContext);\n    const style = {\n    display: data.csvValues? \"flex\": \"none\",\n    // alignItems: \"center\",\n    justifyContent: \"center\",\n    border: \"solid 1px #ddd\",\n    background: \"darkgray\",\n    color: \"white\",\n    opacity: 0.8,\n    // padding: \"20px 10px\",\n    overflow: \"auto\",\n\n};\n    return (\n        <Rnd style={style}\n             default={{\n                 x: 30,\n                 y: 200,\n                 width: 700,\n                 height: 350,\n             }}\n        >\n            <DataTable/>\n        </Rnd>\n    )\n};\n\nexport default DataPanel;","import React, { useEffect } from \"react\";\nimport MyMap from \"./MyMapZoom\";\nimport MyDropZone from \"./UploadButton\";\nimport { DataContextProvider } from \"./context/data-context\";\nimport DataPanel from \"./DataPanel\";\n\nconst App = () => {\n  useEffect(() => {\n    document.title = \"Fortis CSV Viewer\";\n  }, []);\n  return (\n    <div style={{ width: \"95%\", height: \"100%\", margin: \"auto\" }}>\n      <DataContextProvider>\n        <MyDropZone />\n        <MyMap />\n        <DataPanel />\n      </DataContextProvider>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}