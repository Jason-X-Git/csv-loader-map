{"version":3,"sources":["context/data-context.js","MyMapZoom.js","UploadButton.js","DataTable.js","DataPanel.js","SidePanel.js","App.js","reportWebVitals.js","index.js"],"names":["DataContext","createContext","DataContextProvider","props","useState","csvValues","undefined","sortedStructures","data","setData","Provider","value","children","randomcolor","require","useStyles","makeStyles","theme","contentDiv","width","height","margin","layerListDiv","fontSize","padding","sortNumAlpha","a","b","localeCompare","numeric","MyMap","viewDiv","tableDiv","overflow","divSize","setDivSize","classes","useContext","loadData","distanceMeasurement","areaMeasurement","clearMeasurements","distanceButton","classList","remove","areaButton","measurement","clear","activeTool","add","options","url","css","loadModules","Map","MapView","FeatureLayer","Point","Polyline","Graphic","LayerList","Measurement","FeatureTable","Collection","Home","BasemapToggle","array","profileInfoDict","length","filter","pt","order","latitude","longitude","sort","profile","otherPoints","guyPoints","code","includes","sortedProfileNoList","map","s","index","self","indexOf","randomColors","luminosity","count","hue","colorDict","forEach","profileNo","i","console","log","buildPointsFeatures","points","features","item","attr","id","mark","structureAngles","structureGuys","measure","attributes","geometry","graphic","push","groupedByProfile","key","reduce","objectsByKeyValue","obj","concat","groupBy","profileDict","d","pointsSorted","pointsCount","profileLength","Math","round","buildLines","pointsCoordinates","linesArray","hasZ","hasM","paths","spatialReference","wkid","lineRenderer","type","field","uniqueValueInfos","Object","keys","label","symbol","symbolLayers","enable","color","size","markerPlacement","endings","placementTemplate","angleToLine","frame","xmin","ymin","xmax","ymax","markerGraphics","rings","createPolylinesLayer","source","objectIdField","fields","name","popupTemplate","title","content","renderer","createStructuresPointsLayer","structuresFeatures","expressionInfos","expression","outline","labelingInfo","structuresLabels","createOtherPointsLayer","otherPointsFeatures","otherPointsLabels","visible","haloColor","haloSize","font","family","style","weight","labelPlacement","labelExpressionInfo","deconflictionStrategy","zoomToLayer","layer","queryExtent","then","response","view","goTo","extent","catch","error","structuresLayer","otherPointsLayer","linesLayer","container","fieldConfigs","direction","when","basemap","layers","center","zoom","highlightOptions","haloOpacity","fillOpacity","constraints","rotationEnabled","layerList","listItemCreatedFunction","event","actionsOpen","actionsSections","className","ui","profileExpressions","structureExpressions","queryProfile","createQuery","queryStructure","whenLayerView","layerView","fullExtent","homeBtn","goToOverride","target","duration","easing","on","queryExpression","queryFunc","actionId","action","find","where","queryFeatures","result","feature","cloneExt","clone","expand","coordsWidget","document","createElement","showCoordinates","coords","toFixed","scale","innerHTML","watch","isStationary","evt","toMap","x","y","getElementById","clearButton","addEventListener","basemapToggle","nextBasemap","position","useEffect","Date","toLocaleTimeString","class","MyDropZone","onDrop","fileInfo","values","dataValues","struc_mark","struc_angles","struc_guys","parseFloat","lastModified","lastModifiedDate","toString","onError","err","file","inputElem","reason","addRemoveButton","removeButtonColor","onRemoveFile","config","header","table","body","withStyles","root","background","TableCell","panel","wordWrap","borderRadius","fontWeight","section","fontStyle","details","SidePanel","join","App","display","flexDirection","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b7f7ebc2.chunk.js","sourcesContent":["import React, {useState, createContext} from \"react\";\n\nexport const DataContext = createContext()\n\nexport const DataContextProvider = props => {\n    const [data, setData] = useState({\n        csvValues: undefined,\n        sortedStructures: undefined\n    })\n    return (\n        <DataContext.Provider value={[data, setData]}>\n            {props.children}\n        </DataContext.Provider>\n    )\n}","import React, { useContext, useEffect , useState} from \"react\";\nimport { loadModules } from \"esri-loader\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { DataContext } from \"./context/data-context\";\n\nconst randomcolor = require(\"randomcolor\");\n\nconst useStyles = makeStyles((theme) => ({\n \n  contentDiv: {\n    width: \"100wh\",\n    height: \"90vh\",\n    margin: \"10px 5px\",\n  },\n  layerListDiv: {\n    width: \"200px\",\n    fontSize: \"6px\",\n    padding: 0,\n  },\n}));\n\nconst sortNumAlpha = (a, b) => a.localeCompare(b, \"en\", { numeric: true });\n\nconst MyMap = () => {\n  const [divSize, setDivSize] = useState({\n    viewDiv: {\n      width: \"100wh\",\n      height: \"90vh\",\n    },\n    tableDiv: {\n      width: \"100wh\",\n      height: \"0\",\n      overflow: \"auto\",\n    },\n  });\n\n  const classes = useStyles();\n\n  // const data = readJSON()\n  const [data, setData] = useContext(DataContext);\n\n  const csvValues = data.csvValues;\n\n  const loadData = async (csvValues) => {\n    try {\n      const options = {\n        url: \"https://js.arcgis.com/4.18/init.js\",\n        css: \"https://js.arcgis.com/4.18/esri/themes/light/main.css\",\n      };\n      const [\n        Map,\n        MapView,\n        FeatureLayer,\n        Point,\n        Polyline,\n        Graphic,\n        LayerList,\n        Measurement,\n        FeatureTable,\n        Collection,\n        Home,\n        BasemapToggle,\n        array,\n      ] = await loadModules(\n        [\n          \"esri/Map\",\n          \"esri/views/MapView\",\n          \"esri/layers/FeatureLayer\",\n          \"esri/geometry/Point\",\n          \"esri/geometry/Polyline\",\n          \"esri/Graphic\",\n          \"esri/widgets/LayerList\",\n          \"esri/widgets/Measurement\",\n          \"esri/widgets/FeatureTable\",\n          \"esri/core/Collection\",\n          \"esri/widgets/Home\",\n          \"esri/widgets/BasemapToggle\",\n          \"dojo/_base/array\",\n          \"dojo/domReady!\",\n        ],\n        options\n      );\n      let map;\n      let view;\n      const profileInfoDict = {};\n      let linesLayer;\n\n      if (csvValues && csvValues.length > 0) {\n        const sortedStructures = csvValues\n          .filter((pt) => !!pt.order && pt.latitude && pt.longitude)\n          .sort((a, b) => {\n            if (a.profile === b.profile) {\n              return sortNumAlpha(a.order, b.order);\n            } else {\n              return sortNumAlpha(a.profile, b.profile);\n            }\n          });\n        const otherPoints = csvValues.filter(\n          (pt) => !pt.order && pt.latitude && pt.longitude\n        );\n        const guyPoints = otherPoints.filter((pt) => pt.code.includes(\"guy\"));\n        const sortedProfileNoList = sortedStructures\n          .map((s) => s.profile)\n          .sort((a, b) => sortNumAlpha(a, b))\n          .filter((value, index, self) => self.indexOf(value) === index);\n        // console.log(\"Sorted profile no list: \", sortedProfileNoList);\n\n        setData({\n          ...data,\n          sortedStructures,\n          sortedProfileNoList,\n          otherPoints,\n          guyPoints,\n        });\n\n        const randomColors = randomcolor({\n          luminosity: \"bright\",\n          count: sortedProfileNoList.length,\n          hue: \"red\",\n        });\n        const colorDict = {};\n        sortedProfileNoList.forEach((profileNo, i) => {\n          colorDict[profileNo] = randomColors[i];\n        });\n        console.log(\"Colors: \", colorDict);\n        console.log(\n          \"Structure Data: \",\n          \"data length: \",\n          sortedStructures.length,\n          \"sample: \",\n          sortedStructures[0]\n        );\n        console.log(\n          \"Other Data: \",\n          \"data length: \",\n          otherPoints.length,\n          \"sample: \",\n          otherPoints[0]\n        );\n        //   const structureIDList = structurePoints.map((pt) => pt.id);\n\n        const buildPointsFeatures = (points) => {\n          //loop through the items and add to the feature layer\n          const features = [];\n          array.forEach(points, function (item, index) {\n            // console.log(\"item\", item);\n            const attr = {};\n            //pull in any additional attributes if required\n            attr[\"objectID\"] = index;\n            attr[\"id\"] = item.id;\n            if (item.order) {\n              attr[\"mark\"] = item.mark;\n              attr[\"profile\"] = item.profile;\n              attr[\"order\"] = item.order;\n              attr[\"structureAngles\"] = item.structureAngles;\n              attr[\"structureGuys\"] = item.structureGuys;\n              attr[\"measure\"] = item.measure;\n            }\n            attr[\"longitude\"] = item.longitude;\n            attr[\"latitude\"] = item.latitude;\n            attr[\"code\"] = item.code;\n            attr[\"attributes\"] = item.attributes;\n\n            const geometry = new Point(item.longitude, item.latitude);\n\n            const graphic = new Graphic({\n              geometry: geometry,\n              attributes: attr,\n            });\n            features.push(graphic);\n          });\n\n          //   console.log(\"retrieved \", features.length, \" points\");\n          return features;\n        };\n\n        const groupBy = (key) => (array) =>\n          array.reduce((objectsByKeyValue, obj) => {\n            const value = obj[key];\n            objectsByKeyValue[value] = (objectsByKeyValue[value] || []).concat(\n              obj\n            );\n            return objectsByKeyValue;\n          }, {});\n\n        const groupedByProfile = groupBy(\"profile\");\n        const profileDict = groupedByProfile(sortedStructures);\n        // console.log('profile dict', profileDict)\n        sortedProfileNoList.map((profileNo) => {\n          let d = {\n            pointsSorted: profileDict[profileNo].sort((a, b) =>\n              sortNumAlpha(a.order, b.order)\n            ),\n            pointsCount: profileDict[profileNo].length,\n          };\n          const profileLength = Math.round(\n            d.pointsSorted[d.pointsCount - 1].measure,\n            0\n          );\n          d = { profileLength, ...d };\n          profileInfoDict[profileNo] = d;\n        });\n\n        // console.log(\"profile sorted dict\", profileInfoDict);\n\n        const buildLines = () => {\n          //   console.log('grouped', profilePoints)\n          const linesArray = [];\n          let pointsCoordinates;\n          let points;\n          sortedProfileNoList.map((profileNo, index) => {\n            points = profileInfoDict[profileNo].pointsSorted;\n            // console.log(\"Profile \", profileNo, points);\n            pointsCoordinates = [];\n            points.map((pt) =>\n              pointsCoordinates.push([pt.longitude, pt.latitude])\n            );\n            const geometry = new Polyline({\n              hasZ: false,\n              hasM: true,\n              paths: pointsCoordinates,\n              spatialReference: { wkid: 4326 },\n            });\n            const attr = {};\n            attr[\"objectID\"] = index;\n            attr[\"profileNo\"] = profileNo;\n            attr[\"count\"] = points.length;\n            attr[\"length\"] = points[points.length - 1].measure;\n            const graphic = new Graphic({\n              geometry: geometry,\n              attributes: attr,\n            });\n            linesArray.push(graphic);\n          });\n          //   console.log(\"build lines: \", linesArray.length);\n\n          const createLineSymbol = (value, color) => {\n            // color parameter could be used to render different color, but now not used.\n            return {\n              value: value,\n              label: value,\n              symbol: {\n                type: \"cim\", // autocasts as CIMSymbol\n                data: {\n                  type: \"CIMSymbolReference\",\n                  symbol: {\n                    type: \"CIMLineSymbol\",\n                    symbolLayers: [\n                      {\n                        // black 1px line symbol\n                        type: \"CIMSolidStroke\",\n                        enable: true,\n                        width: 3,\n                        color: [240, 94, 35, 255],\n                      },\n                      {\n                        // arrow symbol\n                        type: \"CIMVectorMarker\",\n                        enable: true,\n                        size: 10,\n                        markerPlacement: {\n                          type: \"CIMMarkerPlacementAlongLineSameSize\", // places same size markers along the line\n                          endings: \"WithMarkers\",\n                          placementTemplate: [30], // determines space between each arrow\n                          angleToLine: true, // symbol will maintain its angle to the line when map is rotated\n                        },\n                        frame: {\n                          xmin: -5,\n                          ymin: -5,\n                          xmax: 5,\n                          ymax: 5,\n                        },\n                        markerGraphics: [\n                          {\n                            type: \"CIMMarkerGraphic\",\n                            geometry: {\n                              rings: [\n                                [\n                                  [-8, -5.47],\n                                  [-8, 5.6],\n                                  [1.96, -0.03],\n                                  [-8, -5.47],\n                                ],\n                              ],\n                            },\n                            symbol: {\n                              // black fill for the arrow symbol\n                              type: \"CIMPolygonSymbol\",\n                              symbolLayers: [\n                                {\n                                  type: \"CIMSolidFill\",\n                                  enable: true,\n                                  color: [0, 255, 0, 255],\n                                },\n                              ],\n                            },\n                          },\n                        ],\n                      },\n                    ],\n                  },\n                },\n              },\n            };\n          };\n\n          const lineRenderer = {\n            type: \"unique-value\",\n            field: \"profileNo\",\n            uniqueValueInfos: Object.keys(profileInfoDict).map((profileNo) =>\n              createLineSymbol(profileNo, colorDict[profileNo])\n            ),\n          };\n\n          return [linesArray, lineRenderer];\n        };\n\n        const createPolylinesLayer = () => {\n          const [linesArray, lineRenderer] = buildLines();\n          //   console.log(\"line arrays\", linesArray);\n          //   console.log(\"line render\", lineRenderer);\n          return new FeatureLayer({\n            source: linesArray,\n            objectIdField: \"objectID\",\n            fields: [\n              {\n                name: \"objectID\",\n                type: \"oid\",\n              },\n              {\n                name: \"profileNo\",\n                type: \"string\",\n              },\n              {\n                name: \"count\",\n                type: \"integer\",\n              },\n              {\n                name: \"length\",\n                type: \"double\",\n              },\n            ],\n            popupTemplate: {\n              title: \"Profile\",\n              content: \"Profile {profileNo} - {count} structures - {length} m\",\n            },\n            renderer: lineRenderer,\n            title: \"Profiles\",\n          });\n        };\n\n        //  Creates a client-side FeatureLayer from an array of graphics\n        const createStructuresPointsLayer = () => {\n          const structuresFeatures = buildPointsFeatures(sortedStructures);\n          //   console.log(\"points list\", structuresFeatures);\n\n          const createColorSymbol = (value) => ({\n            value: value,\n            symbol: {\n              type: \"simple-marker\", // autocasts as new SimpleMarkerSymbol()\n              size: 8,\n              color: colorDict[value],\n              outline: {\n                // autocasts as new SimpleLineSymbol()\n                width: 1.5,\n                color: \"white\",\n              },\n            },\n            label: value,\n          });\n          return new FeatureLayer({\n            source: structuresFeatures,\n            objectIdField: \"objectID\",\n            fields: [\n              {\n                name: \"objectID\",\n                type: \"oid\",\n              },\n              {\n                name: \"id\",\n                type: \"string\",\n              },\n              {\n                name: \"profile\",\n                type: \"string\",\n              },\n              {\n                name: \"order\",\n                type: \"string\",\n              },\n              {\n                name: \"structureAngles\",\n                type: \"string\",\n              },\n              {\n                name: \"structureGuys\",\n                type: \"string\",\n              },\n              {\n                name: \"latitude\",\n                type: \"double\",\n              },\n              {\n                name: \"longitude\",\n                type: \"double\",\n              },\n              {\n                name: \"measure\",\n                type: \"double\",\n              },\n              {\n                name: \"code\",\n                type: \"string\",\n              },\n              {\n                name: \"mark\",\n                type: \"string\",\n              },\n              {\n                name: \"attributes\",\n                type: \"string\",\n              },\n            ],\n            popupTemplate: {\n              title: \"Structure Point\",\n              expressionInfos: [\n                {\n                  name: \"measure-roundup\",\n                  title: \"Measure Roundup\",\n                  expression: \"Round($feature.measure, 2)\",\n                },\n              ],\n              content:\n                \"<div>\" +\n                \"<h3>Point {mark}{order} - Profile{profile} - {id} - {code}</h3>\" +\n                \"<ul>\" +\n                \"<li>Measure: {expression/measure-roundup} m</li>\" +\n                \"<li>Angles: {structureAngles}</li>\" +\n                \"<li>Guys: {structureGuys}</li>\" +\n                \"<li>Attributes: {attributes}</li>\" +\n                \"</ul>\" +\n                \"</div>\",\n            },\n\n            renderer: {\n              type: \"unique-value\",\n              field: \"profile\",\n              uniqueValueInfos: sortedProfileNoList.map((profileNo) =>\n                createColorSymbol(profileNo)\n              ),\n            },\n            labelingInfo: structuresLabels,\n            title: \"Structure Points\",\n          });\n        };\n\n        const createOtherPointsLayer = () => {\n          const otherPointsFeatures = buildPointsFeatures(otherPoints);\n          console.log(\"other points number\", otherPointsFeatures.length);\n          const otherPointsLayer = new FeatureLayer({\n            source: otherPointsFeatures,\n            objectIdField: \"objectID\",\n            fields: [\n              {\n                name: \"objectID\",\n                type: \"oid\",\n              },\n              {\n                name: \"id\",\n                type: \"string\",\n              },\n              {\n                name: \"latitude\",\n                type: \"double\",\n              },\n              {\n                name: \"longitude\",\n                type: \"double\",\n              },\n              {\n                name: \"code\",\n                type: \"string\",\n              },\n              {\n                name: \"attributes\",\n                type: \"string\",\n              },\n            ],\n            popupTemplate: {\n              title: \"Non-Structure Point\",\n              content:\n                \"<p>Point <b>{id} ({code})</b></p>\" +\n                \"<ul><li>{attributes}</li><ul>\",\n            },\n            renderer: {\n              type: \"simple\", // autocasts as new SimpleRenderer()\n              symbol: {\n                type: \"simple-marker\", // autocasts as new SimpleMarkerSymbol()\n                size: 5,\n                color: \"blue\",\n                outline: {\n                  // autocasts as new SimpleLineSymbol()\n                  width: 0.5,\n                  color: \"white\",\n                },\n              },\n            },\n            labelingInfo: otherPointsLabels,\n            title: \"Non-Structure Points\",\n            visible: true,\n          });\n          return otherPointsLayer;\n        };\n\n        const structuresLabels = {\n          symbol: {\n            type: \"text\",\n            color: \"red\",\n            haloColor: \"white\",\n            haloSize: \"1.5px\",\n            font: {\n              size: \"18px\",\n              family: \"Noto Sans\",\n              style: \"italic\",\n              weight: \"bolder\",\n            },\n          },\n          labelPlacement: \"above-right\",\n          labelExpressionInfo: {\n            expression:\n              \"'P' + $feature.profile + '-' + $feature.mark[0] + '' + $feature.order\",\n          },\n          deconflictionStrategy: \"static\",\n        };\n\n        const otherPointsLabels = {\n          symbol: {\n            type: \"text\",\n            color: \"blue\",\n            haloColor: \"white\",\n            haloSize: \"1px\",\n            font: {\n              size: \"15px\",\n              family: \"Noto Sans\",\n              style: \"italic\",\n              weight: \"bolder\",\n            },\n          },\n          labelPlacement: \"above-right\",\n          labelExpressionInfo: {\n            expression: \"$feature.id + ' - ' + $feature.code\",\n          },\n          deconflictionStrategy: \"static\",\n        };\n\n        const zoomToLayer = (layer) => {\n          //   console.log(`Zoom to ${layer.title}`);\n          return layer.queryExtent().then(function (response) {\n            view.goTo(response.extent).catch(function (error) {\n              if (error.name !== \"AbortError\") {\n                console.error(error);\n              }\n            });\n          });\n        };\n\n        const structuresLayer = createStructuresPointsLayer();\n        const otherPointsLayer = createOtherPointsLayer();\n        linesLayer = createPolylinesLayer();\n        \n        const featureTable = new FeatureTable({\n          view: view, // The view property must be set for the select/highlight to work\n          layer: structuresLayer,\n          container: \"tableDiv\",\n          // menuConfig: {\n          //   items: [\n          //     {\n          //       label: \"Zoom to feature(s)\",\n          //       iconClass: \"esri-icon-zoom-in-magnifying-glass\",\n          //       clickFunction: function (event) {\n          //         zoomToSelectedFeature();\n          //       },\n          //     },\n          //   ],\n          // },\n          fieldConfigs: [\n            {\n              name: \"objectID\",\n              label: \"ID\",\n              // This field will not be shown in the table initially\n              visible: false,\n            },\n            {\n              name: \"id\",\n              label: \"Point ID\",\n            },\n            {\n              name: \"profile\",\n              label: \"Profile\",\n              // The table will be sorted by this column\n              // in ascending order\n              direction: \"asc\",\n            },\n            {\n              name: \"mark\",\n              label: \"Structure Mark\",\n            },\n            {\n              name: \"measure\",\n              label: \"Measure (m)\",\n              // The table will be sorted by this column\n              // in ascending order\n              // direction: \"asc\"\n            },\n            {\n              name: \"structureAngles\",\n              label: \"Angles\",\n            },\n            {\n              name: \"structureGuys\",\n              label: \"Guys\",\n            },\n          ],\n        });\n\n        linesLayer.when(function () {\n          console.log(\"Zoom to line layer\");\n          zoomToLayer(linesLayer);\n        });\n\n        map = new Map({\n          basemap: \"hybrid\",\n          layers: [linesLayer, otherPointsLayer, structuresLayer],\n        });\n        view = new MapView({\n          container: \"viewDiv\",\n          center: [-168, 46],\n          zoom: 2,\n          map: map,\n          // set highlightOptions like color and fillOpacity\n          highlightOptions: {\n            color: [255, 255, 0, 1],\n            haloOpacity: 0.9,\n            fillOpacity: 0.4,\n          },\n          constraints: {\n            rotationEnabled: false,\n          },\n        });\n\n        const createActions = (event) => {\n          const item = event.item;\n          //   console.log(\"item\", item);\n\n          if (item.title.includes(\"Profile\")) {\n            item.actionsOpen = false;\n            item.actionsSections = [\n              [\"All\", ...sortedProfileNoList].map((profileNo) => {\n                // console.log(\"profile detail\", profileInfoDict[profileNo]);\n                let profileLength;\n                if (profileNo === \"All\") {\n                  profileLength = Object.keys(profileInfoDict)\n                    .map(\n                      (profileNo) => profileInfoDict[profileNo].profileLength\n                    )\n                    .reduce((a, b) => a + b);\n                } else {\n                  profileLength = profileInfoDict[profileNo].profileLength;\n                }\n                return {\n                  title: `Profile ${profileNo} - ${profileLength} m`,\n                  className: \"esri-icon-zoom-out-fixed\",\n                  id: profileNo,\n                };\n              }),\n            ];\n          } else if (item.title === \"Structure Points\") {\n            item.actionsOpen = false;\n            item.actionsSections = [\n              sortedStructures.map((pt) => {\n                return {\n                  title: `P${pt.profile}-${pt.mark[0]}${pt.order}-${pt.id}\n                                    ${\n                                      pt.structureAngles.includes(\"running\")\n                                        ? \"-Running\"\n                                        : \"\"\n                                    }\n                                    ${\n                                      pt.structureAngles.includes(\"tap\")\n                                        ? \"-Tap\"\n                                        : \"\"\n                                    }\n                                    ${\n                                      pt.structureGuys &&\n                                      pt.structureGuys.includes(\"guy\")\n                                        ? \"-Guys\"\n                                        : \"\"\n                                    }`,\n                  className: \"esri-icon-zoom-out-fixed\",\n                  id: `${pt.id}`,\n                };\n              }),\n            ];\n          }\n        };\n        const layerList = new LayerList({\n          view: view,\n          listItemCreatedFunction: createActions,\n          container: \"layerListDiv\",\n        });\n        view.ui.add(layerList, \"top-right\");\n\n        // definitionExpressions used by each action\n        // listed in the LayerList\n\n        const profileExpressions = new Collection(\n          [\"All\", ...Object.keys(profileInfoDict)].map((profileNo) => ({\n            id: profileNo,\n            expression: `profileNo = '${profileNo}'`,\n          }))\n        );\n        const structureExpressions = new Collection(\n          sortedStructures.map((pt) => ({\n            id: pt.id,\n            expression: `id = '${pt.id}'`,\n          }))\n        );\n\n        // When an action is triggered, the definitionExpression\n        // is set on the layer and the view's extent updates\n        // to match the features visible in the layer\n\n        const queryProfile = linesLayer.createQuery();\n        const queryStructure = structuresLayer.createQuery();\n        view.whenLayerView(linesLayer).then((layerView) => {\n          const fullExtent = linesLayer.fullExtent;\n\n          homeBtn.goToOverride = () => {\n            view\n              .goTo(\n                {\n                  target: fullExtent,\n                },\n                {\n                  duration: 2000,\n                  easing: \"in-out-expo\",\n                }\n              )\n              .catch((error) => {\n                if (error.name !== \"AbortError\") {\n                  console.log(error);\n                }\n              });\n          };\n          layerList.on(\"trigger-action\", (event) => {\n            const actionId = event.action.id;\n            const layer = event.item.layer;\n\n            let queryExpression;\n            let queryFunc;\n            if (event.item.title.includes(\"Profile\")) {\n              queryExpression = profileExpressions.find((item) => {\n                return item.id === actionId;\n              }).expression;\n              queryFunc = queryProfile;\n            } else {\n              queryExpression = structureExpressions.find((item) => {\n                return item.id === actionId;\n              }).expression;\n              queryFunc = queryStructure;\n            }\n            console.log(\"Expression: \", queryExpression);\n\n            if (!queryExpression.includes(\"All\")) {\n              queryFunc.where = queryExpression;\n              layer.queryFeatures(queryFunc).then((result) => {\n                // the feature to be highlighted\n                const feature = result.features[0];\n\n                console.log(\"type\", feature.geometry.type);\n                if (feature.geometry.type === \"point\") {\n                  view\n                    .goTo(\n                      {\n                        target: feature.geometry,\n                        zoom: 20,\n                      },\n                      {\n                        duration: 2000,\n                        easing: \"in-out-expo\",\n                      }\n                    )\n                    .catch((error) => {\n                      if (error.name !== \"AbortError\") {\n                        console.log(error);\n                      }\n                    });\n                } else {\n                  const ext = feature.geometry.extent;\n\n                  const cloneExt = ext.clone();\n                  // center the feature\n                  view\n                    .goTo(\n                      {\n                        target: feature.geometry,\n                        extent: cloneExt.expand(1.5),\n                      },\n                      {\n                        duration: 2000,\n                        easing: \"in-out-expo\",\n                      }\n                    )\n                    .catch((error) => {\n                      if (error.name !== \"AbortError\") {\n                        console.log(error);\n                      }\n                    });\n                }\n              });\n            } else {\n              view\n                .goTo(\n                  {\n                    target: fullExtent,\n                  },\n                  {\n                    duration: 2000,\n                    easing: \"in-out-expo\",\n                  }\n                )\n                .catch((error) => {\n                  if (error.name !== \"AbortError\") {\n                    console.log(error);\n                  }\n                });\n            }\n          });\n        });\n        setDivSize({\n          viewDiv: {\n            width: \"100wh\",\n            height: \"70vh\",\n          },\n          tableDiv: {\n            width: \"100wh\",\n            height: \"20vh\",\n            overflow: \"auto\",\n          },\n        });\n      } else {\n        map = new Map({\n          basemap: \"hybrid\",\n        });\n        view = new MapView({\n          container: \"viewDiv\",\n          center: [-116, 54],\n          zoom: 6,\n          map: map,\n          // set highlightOptions like color and fillOpacity\n          highlightOptions: {\n            color: [255, 255, 0, 1],\n            haloOpacity: 0.9,\n            fillOpacity: 0.4,\n          },\n        });\n      }\n\n      const coordsWidget = document.createElement(\"div\");\n      coordsWidget.id = \"coordsWidget\";\n      coordsWidget.className = \"esri-widget esri-component\";\n      coordsWidget.style.padding = \"7px 15px 5px\";\n\n\n      const showCoordinates = (pt) => {\n        const coords =\n          \"Lat/Lon \" +\n          pt.latitude.toFixed(3) +\n          \" \" +\n          pt.longitude.toFixed(3) +\n          \" | Scale 1:\" +\n          Math.round(view.scale * 1) / 1 +\n          \" | Zoom \" +\n          view.zoom;\n        coordsWidget.innerHTML = coords;\n      };\n\n      view.watch(\"stationary\", function (isStationary) {\n        showCoordinates(view.center);\n      });\n\n      view.on(\"pointer-move\", function (evt) {\n        showCoordinates(view.toMap({ x: evt.x, y: evt.y }));\n      });\n\n      const measurement = new Measurement();\n      const distanceButton = document.getElementById(\"distance\");\n      const areaButton = document.getElementById(\"area\");\n      const clearButton = document.getElementById(\"clear\");\n      distanceButton.addEventListener(\"click\", function () {\n        distanceMeasurement();\n      });\n      areaButton.addEventListener(\"click\", function () {\n        areaMeasurement();\n      });\n      clearButton.addEventListener(\"click\", function () {\n        clearMeasurements();\n      });\n\n      const homeBtn = new Home({\n        view: view,\n      });\n      view.ui.add(homeBtn, \"top-left\");\n      \n      var basemapToggle = new BasemapToggle({\n        view: view,\n        nextBasemap: \"topo-vector\",\n      });\n      \n      view.ui.add(basemapToggle, {\n        position: \"bottom-left\",\n      });\n      view.ui.add(coordsWidget, \"bottom-left\");\n      \n      view.ui.add(distanceButton, \"top-left\");\n      view.ui.add(areaButton, \"top-left\");\n      view.ui.add(clearButton, \"top-left\");\n      view.ui.add(measurement, \"top-left\");\n\n      measurement.view = view;\n\n      // Call the appropriate DistanceMeasurement2D or DirectLineMeasurement3D\n      function distanceMeasurement() {\n        measurement.activeTool = \"distance\";\n        distanceButton.classList.add(\"active\");\n        areaButton.classList.remove(\"active\");\n      }\n\n      // Call the appropriate AreaMeasurement2D or AreaMeasurement3D\n      function areaMeasurement() {\n        measurement.activeTool = \"area\";\n        distanceButton.classList.remove(\"active\");\n        areaButton.classList.add(\"active\");\n      }\n\n      // Clears all measurements\n      function clearMeasurements() {\n        distanceButton.classList.remove(\"active\");\n        areaButton.classList.remove(\"active\");\n        measurement.clear();\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  useEffect(() => {\n    console.log(`Map get data: ${new Date().toLocaleTimeString()}`, csvValues);\n\n    const layerListDiv = document.getElementById(\"layerListDiv\");\n    const tableDiv = document.getElementById(\"tableDiv\");\n    if (layerListDiv) {\n      layerListDiv.innerHTML = \"\";\n      tableDiv.innerHTML = \"\";\n    }\n    loadData(csvValues);\n  }, [csvValues]);\n\n  return (\n    <div id=\"contentDiv\" className={classes.contentDiv}>\n      <div id=\"viewDiv\" style={divSize.viewDiv} />\n      {csvValues && <div id=\"tableDiv\" style={divSize.tableDiv} />}\n      {csvValues && <div id=\"layerListDiv\" className={classes.layerListDiv} />}\n      <div id=\"toolbarDiv\" class=\"esri-component esri-widget\">\n        <button\n          id=\"distance\"\n          class=\"esri-widget--button esri-interactive esri-icon-measure-line\"\n          title=\"Distance Measurement Tool\"\n        ></button>\n        <button\n          id=\"area\"\n          class=\"esri-widget--button esri-interactive esri-icon-measure-area\"\n          title=\"Area Measurement Tool\"\n        ></button>\n        <button\n          id=\"clear\"\n          class=\"esri-widget--button esri-interactive esri-icon-trash\"\n          title=\"Clear Measurements\"\n        ></button>\n      </div>\n    </div>\n  );\n};\n\nexport default MyMap;\n","import React, {useContext} from 'react'\n\nimport {CSVReader} from 'react-papaparse'\nimport {DataContext} from \"./context/data-context\";\n\nconst MyDropZone = () => {\n    const [data, setData] = useContext(DataContext)\n    const handleOnDrop = (data, fileInfo) => {\n        console.log('values: ', Object.values(data))\n        const dataValues = Object.values(data)\n            .filter(item => !!item)\n            .map(item => {\n                    const obj = item.data\n                    if (item.data.order) {\n                        return {\n                            id: obj.id,\n                            code: obj.code,\n                            mark: obj.struc_mark,\n                            profile: obj.profile,\n                            order: obj.order,\n                            structureAngles: obj.struc_angles,\n                            structureGuys: obj.struc_guys,\n                            longitude: parseFloat(obj.longitude),\n                            latitude: parseFloat(obj.latitude),\n                            measure: parseFloat(obj.measure),\n                            attributes: obj.attributes,\n                        }\n\n                    } else {\n\n                        return {\n                            id: obj.id,\n                            code: obj.code,\n                            longitude: parseFloat(obj.longitude),\n                            latitude: parseFloat(obj.latitude),\n                            attributes: obj.attributes,\n                        }\n                    }\n                }\n            )\n        setData({\n          ...data,\n          csvValues: dataValues,\n          fileInfo: {\n            name: fileInfo.name,\n            lastModified: fileInfo.lastModifiedDate.toString(),\n          },\n        });\n    }\n\n\n    const handleOnError = (err, file, inputElem, reason) => {\n        console.log(err)\n    }\n\n    const handleOnRemoveFile = (data) => {\n    }\n\n    return (\n        <CSVReader\n            onDrop={handleOnDrop}\n            onError={handleOnError}\n            addRemoveButton\n            removeButtonColor='#659cef'\n            onRemoveFile={handleOnRemoveFile}\n            config={{header: true}}\n        >\n            <span>Drop CSV file here or click to upload.</span>\n        </CSVReader>\n    )\n}\n\nexport default MyDropZone","import React, { useContext } from \"react\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { DataContext } from \"./context/data-context\";\nimport { blueGrey } from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles({\n  table: {},\n  body: {\n    // width: 700,\n  },\n  header: {\n    // width: 700,\n    // headerStyle: {position: 'sticky', top: 0},\n  },\n});\n\nconst StyledTableCell = withStyles({\n  root: {\n    color: \"black\",\n    background: \"whitesmoke\",\n    fontSize: 16,\n  },\n})(TableCell);\n\nconst StyledTableHeaderCell = withStyles({\n  root: {\n    color: \"white\",\n    background: \"slateblue\",\n    fontSize: 18,\n  },\n})(TableCell);\n\nexport default function BasicTable() {\n  const [data] = useContext(DataContext);\n  const structurePoints = data.sortedStructures;\n\n  const classes = useStyles();\n\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"simple table\">\n        <TableHead className={classes.header}>\n          <TableRow>\n            <StyledTableHeaderCell align=\"middle\">ID</StyledTableHeaderCell>\n            <StyledTableHeaderCell align=\"middle\">\n              Profile\n            </StyledTableHeaderCell>\n            <StyledTableHeaderCell align=\"middle\">STR#</StyledTableHeaderCell>\n            <StyledTableHeaderCell align=\"middle\">Code</StyledTableHeaderCell>\n            <StyledTableHeaderCell align=\"middle\">\n              Measure&nbsp;(m)\n            </StyledTableHeaderCell>\n            <StyledTableHeaderCell align=\"middle\">Angles</StyledTableHeaderCell>\n            <StyledTableHeaderCell align=\"middle\">Guys</StyledTableHeaderCell>\n          </TableRow>\n        </TableHead>\n        <TableBody className={classes.body}>\n          {structurePoints &&\n            structurePoints.map((pt) => (\n              <TableRow key={pt.id}>\n                <StyledTableCell align=\"middle\"> {pt.id}</StyledTableCell>\n                <StyledTableCell align=\"middle\"> {pt.profile}</StyledTableCell>\n                <StyledTableCell align=\"middle\">\n                  {pt.mark}\n                  {pt.order}\n                </StyledTableCell>\n                <StyledTableCell align=\"middle\">{pt.code}</StyledTableCell>\n                <StyledTableCell align=\"middle\">{pt.measure}</StyledTableCell>\n                <StyledTableCell align=\"middle\">\n                  {pt.structureAngles}\n                </StyledTableCell>\n                <StyledTableCell align=\"middle\">\n                  {pt.structureGuys}\n                </StyledTableCell>\n              </TableRow>\n            ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n","import React, { useContext } from \"react\";\nimport { Rnd } from \"react-rnd\";\nimport DataTable from \"./DataTable\";\nimport { DataContext } from \"./context/data-context\";\n\nconst DataPanel = () => {\n  const [data] = useContext(DataContext);\n  const style = {\n    display: data.csvValues ? \"flex\" : \"none\",\n    // alignItems: \"center\",\n    justifyContent: \"center\",\n    border: \"solid 1px #ddd\",\n    background: \"darkgray\",\n    color: \"white\",\n    opacity: 0.8,\n    // padding: \"20px 10px\",\n    overflow: \"auto\",\n  };\n  const defaultScreen = {\n    x: 30,\n    y: 300,\n    width: 800,\n    height: 300,\n  };\n\n  return (\n    <Rnd style={style} default={defaultScreen}>\n      <DataTable />\n    </Rnd>\n  );\n};\n\nexport default DataPanel;\n","import React, { useContext } from \"react\";\nimport { DataContext } from \"./context/data-context\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  panel: {\n    width: \"15%\",\n    margin: \"15px 15px\",\n    color: \"white\",\n    background: \"slateblue\",\n    wordWrap: \"break-word\",\n    borderRadius: \"10px\",\n  },\n  header: {\n    fontSize: \"30px\",\n    fontWeight: 500,\n    color: \"wheat\"\n  },\n  section: {\n    margin: \"5px\",\n    padding: \"2px\",\n  },\n  label: {\n    fontSize: \"20px\",\n    fontWeight: 500,\n    fontStyle: \"italic\",\n  },\n  details: {\n    fontSize: \"15px\",\n    fontWeight: 300,\n  },\n}));\n\nconst SidePanel = () => {\n  const classes = useStyles();\n\n  const [data] = useContext(DataContext);\n\n  return (\n    <div className={classes.panel}>\n      {data.fileInfo && (\n        <div className={classes.section}>\n          <p className={classes.header}>File Info</p>\n          <p className={classes.label}>{data.fileInfo.name}</p>\n          <p className={classes.label}>{data.fileInfo.lastModified}</p>\n        </div>\n      )}\n\n      {data.sortedProfileNoList && (\n        <div className={classes.section}>\n          <p className={classes.header}>Project Details</p>\n          <p className={classes.label}>\n            {data.sortedProfileNoList.length} Profiles\n          </p>\n          <p className={classes.details}>\n            {data.sortedProfileNoList.join(\", \")}\n          </p>\n        </div>\n      )}\n      {data.sortedStructures && (\n        <p className={classes.section}>\n          <p className={classes.label}>\n            {data.sortedStructures.length} Structures\n          </p>\n        </p>\n      )}\n      {data.otherPoints && (\n        <p className={classes.section}>\n          <p className={classes.label}>\n            {data.otherPoints.length} Non-Structures\n          </p>\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default SidePanel;\n","import React, { useEffect } from \"react\";\nimport MyMap from \"./MyMapZoom\";\nimport MyDropZone from \"./UploadButton\";\nimport { DataContextProvider } from \"./context/data-context\";\nimport DataPanel from \"./DataPanel\";\nimport SidePanel from \"./SidePanel\";\n\nconst App = () => {\n  useEffect(() => {\n    document.title = \"Fortis CSV Viewer\";\n  }, []);\n  return (\n    <DataContextProvider>\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <SidePanel />\n        <div style={{ width: \"85%\", height: \"100%\", margin: \"5px 10px\" }}>\n          <MyDropZone />\n          <MyMap />\n        </div>\n      </div>\n    </DataContextProvider>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}