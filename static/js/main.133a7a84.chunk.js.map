{"version":3,"sources":["context/data-context.js","MyMapZoom.js","UploadButton.js","App.js","reportWebVitals.js","index.js"],"names":["DataContext","createContext","DataContextProvider","props","useState","data","setData","Provider","value","children","randomcolor","require","useStyles","makeStyles","theme","viewDiv","width","height","contentDiv","margin","layerListDiv","fontSize","padding","MyMap","classes","useContext","loadData","buildPoints","createPolylinesLayer","createPointsLayer","createActions","a","event","item","title","includes","actionsOpen","actionsSections","Object","keys","profileInfoDict","map","profileNo","profileLength","reduce","b","className","id","pointFeatures","FeatureLayer","source","objectIdField","fields","name","type","popupTemplate","expressionInfos","expression","content","renderer","symbol","size","color","outline","labelingInfo","pointsLabels","buildLines","linesArray","lineRenderer","features","array","forEach","structureJsonArray","attr","profile","order","longitude","latitude","measure","geometry","Point","graphic","Graphic","attributes","push","console","log","length","options","url","css","loadModules","Map","MapView","Polyline","LayerList","Collection","groupedByProfile","key","objectsByKeyValue","obj","concat","groupBy","profileDict","d","pointsSorted","sort","parseInt","pointsCount","Math","round","pointsCoordinates","points","pt","hasZ","hasM","paths","spatialReference","wkid","field","uniqueValueInfos","luminosity","hue","label","haloColor","haloSize","font","family","style","weight","labelPlacement","labelExpressionInfo","deconflictionStrategy","zoomToLayer","layer","queryExtent","then","response","view","goTo","extent","catch","error","pointsLayer","linesLayer","when","basemap","layers","container","center","zoom","highlightOptions","haloOpacity","fillOpacity","layerList","listItemCreatedFunction","ui","add","profileExpressions","queryProfile","createQuery","whenLayerView","layerView","fullExtent","on","actionId","action","queryExpression","find","target","duration","easing","where","queryFeatures","result","highlightSelect","remove","feature","highlight","cloneExt","clone","expand","coordsWidget","document","createElement","showCoordinates","coords","toFixed","scale","innerHTML","watch","isStationary","evt","toMap","x","y","useEffect","Date","toLocaleTimeString","getElementById","MyDropZone","onDrop","dataValues","values","filter","parseFloat","onError","err","file","inputElem","reason","addRemoveButton","removeButtonColor","onRemoveFile","config","header","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.133a7a84.chunk.js","sourcesContent":["import React, {useState, createContext} from \"react\";\n\nexport const DataContext = createContext()\n\nexport const DataContextProvider = props => {\n    const [data, setData] = useState([])\n    return (\n        <DataContext.Provider value={[data, setData]}>\n            {props.children}\n        </DataContext.Provider>\n    )\n}","import React, {useContext, useEffect} from \"react\";\nimport {loadModules} from \"esri-loader\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {DataContext} from \"./context/data-context\";\n\nconst randomcolor = require(\"randomcolor\");\n\nconst useStyles = makeStyles((theme) => ({\n    viewDiv: {\n        width: \"100wh\",\n        height: \"90vh\",\n    },\n    contentDiv: {\n        width: \"100wh\",\n        height: \"90vh\",\n        margin: \"10px 5px\",\n    },\n    layerListDiv: {\n        width: \"200px\",\n        fontSize: \"6px\",\n        padding: 0,\n    },\n}));\n\nconst MyMap = () => {\n    const classes = useStyles();\n\n    // const data = readJSON()\n    const [data] = useContext(DataContext)\n\n    const loadData = async (data) => {\n        try {\n            // const structureJsonArray = readJSON();\n            const structureJsonArray = await data;\n            console.log('Data type: ', typeof data, 'data length: ', data.length)\n            //   const structureIDList = structureJsonArray.map((pt) => pt.id);\n            const options = {\n                url: \"https://js.arcgis.com/4.18/init.js\",\n                css: \"https://js.arcgis.com/4.18/esri/themes/light/main.css\",\n            };\n            const [\n                Map,\n                MapView,\n                FeatureLayer,\n                Point,\n                Polyline,\n                Graphic,\n                LayerList,\n                Collection,\n                array,\n            ] = await loadModules(\n                [\n                    \"esri/Map\",\n                    \"esri/views/MapView\",\n                    \"esri/layers/FeatureLayer\",\n                    \"esri/geometry/Point\",\n                    \"esri/geometry/Polyline\",\n                    \"esri/Graphic\",\n                    \"esri/widgets/LayerList\",\n                    \"esri/core/Collection\",\n                    \"dojo/_base/array\",\n                    \"dojo/domReady!\",\n                ],\n                options\n            );\n\n            function buildPoints() {\n                //loop through the items and add to the feature layer\n                const features = [];\n                array.forEach(structureJsonArray, function (item) {\n                    // console.log(\"item\", item);\n                    const attr = {};\n                    //pull in any additional attributes if required\n                    attr[\"id\"] = item.id;\n                    attr[\"profile\"] = item.profile;\n                    attr[\"order\"] = item.order;\n                    attr[\"longitude\"] = item.longitude;\n                    attr[\"latitude\"] = item.latitude;\n                    attr[\"measure\"] = item.measure;\n\n                    const geometry = new Point(item.longitude, item.latitude);\n\n                    const graphic = new Graphic({\n                        geometry: geometry,\n                        attributes: attr,\n                    });\n                    features.push(graphic);\n                });\n\n                //   console.log(\"retrieved \", features.length, \" points\");\n                return features;\n            }\n\n            const groupBy = (key) => (array) =>\n                array.reduce((objectsByKeyValue, obj) => {\n                    const value = obj[key];\n                    objectsByKeyValue[value] = (objectsByKeyValue[value] || []).concat(\n                        obj\n                    );\n                    return objectsByKeyValue;\n                }, {});\n\n            const groupedByProfile = groupBy(\"profile\");\n            const profileDict = groupedByProfile(structureJsonArray);\n            // console.log('profile dict', profileDict)\n            const profileInfoDict = {};\n            Object.keys(profileDict).map((profileNo) => {\n                let d = {\n                    pointsSorted: profileDict[profileNo].sort((a, b) =>\n                        parseInt(a.order) < parseInt(b.order) ? -1 : 1\n                    ),\n                    pointsCount: profileDict[profileNo].length,\n                };\n                const profileLength = Math.round(\n                    d.pointsSorted[d.pointsCount - 1].measure,\n                    0\n                );\n                d = {profileLength, ...d};\n                profileInfoDict[profileNo] = d;\n            });\n\n            // console.log(\"profile sorted dict\", profileInfoDict);\n\n            const buildLines = () => {\n                //   console.log('grouped', profilePoints)\n                const linesArray = [];\n                let pointsCoordinates;\n                let points;\n                Object.keys(profileInfoDict).map((profileNo) => {\n                    points = profileInfoDict[profileNo].pointsSorted;\n                    // console.log(\"Profile \", profileNo, points);\n                    pointsCoordinates = [];\n                    points.map((pt) =>\n                        pointsCoordinates.push([pt.longitude, pt.latitude])\n                    );\n                    const geometry = new Polyline({\n                        hasZ: false,\n                        hasM: true,\n                        paths: pointsCoordinates,\n                        spatialReference: {wkid: 4326},\n                    });\n                    const attr = {};\n                    attr[\"objectID\"] = profileNo;\n                    attr[\"count\"] = points.length;\n                    attr[\"length\"] = points[points.length - 1].measure;\n                    const graphic = new Graphic({\n                        geometry: geometry,\n                        attributes: attr,\n                    });\n                    linesArray.push(graphic);\n                });\n                //   console.log(\"build lines: \", linesArray.length);\n\n                const createLineSymbol = (value, color) => {\n                    return {\n                        value: value,\n                        symbol: {\n                            type: \"simple-line\", // autocasts as SimpleLineSymbol()\n                            color: color,\n                            width: 3,\n                        },\n                        label: value,\n                    };\n                };\n\n                const lineRenderer = {\n                    type: \"unique-value\",\n                    field: \"objectID\",\n                    uniqueValueInfos: Object.keys(profileInfoDict).map((profileNo) =>\n                        createLineSymbol(\n                            profileNo,\n                            randomcolor({\n                                luminosity: \"bright\",\n                                hue: \"red\",\n                            })\n                        )\n                    ),\n                };\n\n                return [linesArray, lineRenderer];\n            };\n\n            function createPolylinesLayer() {\n                const [linesArray, lineRenderer] = buildLines();\n                //   console.log(\"line arrays\", linesArray);\n                //   console.log(\"line render\", lineRenderer);\n                const linesLayer = new FeatureLayer({\n                    source: linesArray,\n                    objectIdField: \"objectID\",\n                    fields: [\n                        {\n                            name: \"objectID\",\n                            type: \"oid\",\n                        },\n                        {\n                            name: \"count\",\n                            type: \"integer\",\n                        },\n                        {\n                            name: \"length\",\n                            type: \"double\",\n                        },\n                    ],\n                    popupTemplate: {\n                        title: \"Profile\",\n                        content: \"Profile {objectID} - {count} structures - {length} m\",\n                    },\n                    renderer: lineRenderer,\n                    title: \"Profiles\",\n                });\n                return linesLayer;\n            }\n\n            //  Creates a client-side FeatureLayer from an array of graphics\n            function createPointsLayer() {\n                const pointFeatures = buildPoints();\n                //   console.log(\"points list\", pointFeatures);\n\n                const pointsLayer = new FeatureLayer({\n                    source: pointFeatures,\n                    objectIdField: \"id\",\n                    fields: [\n                        {\n                            name: \"id\",\n                            type: \"oid\",\n                        },\n                        {\n                            name: \"profile\",\n                            type: \"string\",\n                        },\n                        {\n                            name: \"order\",\n                            type: \"string\",\n                        },\n                        {\n                            name: \"latitude\",\n                            type: \"double\",\n                        },\n                        {\n                            name: \"longitude\",\n                            type: \"double\",\n                        },\n                        {\n                            name: \"measure\",\n                            type: \"double\",\n                        },\n                    ],\n                    popupTemplate: {\n                        title: \"Point\",\n                        expressionInfos: [\n                            {\n                                name: \"measure-roundup\",\n                                title: \"Measure Roundup\",\n                                expression: \"Round($feature.measure, 0)\",\n                            },\n                        ],\n                        content:\n                            \"Point {id}. Order {order}. Measure: {expression/measure-roundup} m\",\n                    },\n                    renderer: {\n                        type: \"simple\", // autocasts as new SimpleRenderer()\n                        symbol: {\n                            type: \"simple-marker\", // autocasts as new SimpleMarkerSymbol()\n                            size: 6,\n                            color: \"blue\",\n                            outline: {\n                                // autocasts as new SimpleLineSymbol()\n                                width: 0.5,\n                                color: \"white\",\n                            },\n                        },\n                    },\n                    labelingInfo: pointsLabels,\n                    title: \"Structure Points\",\n                });\n                return pointsLayer;\n            }\n\n            const pointsLabels = {\n                symbol: {\n                    type: \"text\",\n                    color: \"red\",\n                    haloColor: \"white\",\n                    haloSize: \"1px\",\n                    font: {\n                        size: \"16px\",\n                        family: \"Noto Sans\",\n                        style: \"italic\",\n                        weight: \"bolder\",\n                    },\n                },\n                labelPlacement: \"above-right\",\n                labelExpressionInfo: {\n                    expression: \"$feature.profile + ' - ' + $feature.order\",\n                },\n                deconflictionStrategy: \"static\",\n            };\n\n            const zoomToLayer = (layer) => {\n                //   console.log(`Zoom to ${layer.title}`);\n                return layer.queryExtent().then(function (response) {\n                    view.goTo(response.extent).catch(function (error) {\n                        if (error.name !== \"AbortError\") {\n                            console.error(error);\n                        }\n                    });\n                });\n            };\n\n            const pointsLayer = createPointsLayer();\n            const linesLayer = createPolylinesLayer();\n\n            linesLayer.when(function () {\n                console.log('Zoom to line layer')\n                zoomToLayer(linesLayer);\n            });\n\n            const map = new Map({\n                basemap: \"hybrid\",\n                layers: [linesLayer, pointsLayer],\n            });\n\n            const view = new MapView({\n                container: \"viewDiv\",\n                center: [-168, 46],\n                zoom: 2,\n                map: map,\n                // set highlightOptions like color and fillOpacity\n                highlightOptions: {\n                    color: [255, 255, 0, 1],\n                    haloOpacity: 0.9,\n                    fillOpacity: 0.4,\n                },\n            });\n\n            const layerList = new LayerList({\n                view: view,\n                listItemCreatedFunction: createActions,\n                container: \"layerListDiv\",\n            });\n            view.ui.add(layerList, \"top-right\");\n\n            // definitionExpressions used by each action\n            // listed in the LayerList\n\n            const profileExpressions = new Collection(\n                [\"All\", ...Object.keys(profileInfoDict)].map((profileNo) => ({\n                    id: profileNo,\n                    expression: `objectID = '${profileNo}'`,\n                }))\n            );\n\n            // When an action is triggered, the definitionExpression\n            // is set on the layer and the view's extent updates\n            // to match the features visible in the layer\n\n            const queryProfile = linesLayer.createQuery();\n            let highlightSelect;\n            view.whenLayerView(linesLayer).then((layerView) => {\n                const fullExtent = linesLayer.fullExtent;\n                layerList.on(\"trigger-action\", function (event) {\n                    const actionId = event.action.id;\n                    const layer = event.item.layer;\n\n                    const queryExpression = profileExpressions.find(function (item) {\n                        return item.id === actionId;\n                    }).expression;\n                    // console.log(\"Expression: \", queryExpression);\n\n                    if (!queryExpression.includes(\"All\")) {\n                        queryProfile.where = queryExpression;\n                        layer.queryFeatures(queryProfile).then((result) => {\n                            // if a feature is already highlighted, then remove the highlight\n                            if (highlightSelect) {\n                                highlightSelect.remove();\n                            }\n\n                            // the feature to be highlighted\n                            const feature = result.features[0];\n\n                            // use the objectID to highlight the feature\n                            highlightSelect = layerView.highlight(\n                                feature.attributes[\"objectID\"]\n                            );\n                            const ext = feature.geometry.extent;\n                            const cloneExt = ext.clone();\n                            // center the feature\n                            view\n                                .goTo(\n                                    {\n                                        target: feature.geometry,\n                                        extent: cloneExt.expand(1.5),\n                                    },\n                                    {\n                                        duration: 2000,\n                                        easing: \"in-out-expo\",\n                                    }\n                                )\n                                .catch(function (error) {\n                                    if (error.name != \"AbortError\") {\n                                        console.log(error);\n                                    }\n                                });\n                        });\n                    } else {\n                        view\n                            .goTo(\n                                {\n                                    target: fullExtent,\n                                },\n                                {\n                                    duration: 2000,\n                                    easing: \"in-out-expo\",\n                                }\n                            )\n                            .catch(function (error) {\n                                if (error.name != \"AbortError\") {\n                                    console.log(error);\n                                }\n                            });\n                    }\n                });\n            });\n\n            function createActions(event) {\n                const item = event.item;\n                //   console.log(\"item\", item);\n\n                if (item.title.includes(\"Profile\")) {\n                    item.actionsOpen = false;\n                    item.actionsSections = [\n                        [\"All\", ...Object.keys(profileInfoDict)].map((profileNo) => {\n                            // console.log(\"profile detail\", profileInfoDict[profileNo]);\n                            let profileLength;\n                            if (profileNo === \"All\") {\n                                profileLength = Object.keys(profileInfoDict)\n                                    .map((profileNo) => profileInfoDict[profileNo].profileLength)\n                                    .reduce((a, b) => a + b);\n                            } else {\n                                profileLength = profileInfoDict[profileNo].profileLength;\n                            }\n                            return {\n                                title: `Profile ${profileNo} - ${profileLength} m`,\n                                className: \"esri-icon-zoom-out-fixed\",\n                                id: profileNo,\n                            };\n                        }),\n                    ];\n                }\n            }\n\n            const coordsWidget = document.createElement(\"div\");\n            coordsWidget.id = \"coordsWidget\";\n            coordsWidget.className = \"esri-widget esri-component\";\n            coordsWidget.style.padding = \"7px 15px 5px\";\n\n            view.ui.add(coordsWidget, \"bottom-left\");\n\n            const showCoordinates = (pt) => {\n                const coords =\n                    \"Lat/Lon \" +\n                    pt.latitude.toFixed(3) +\n                    \" \" +\n                    pt.longitude.toFixed(3) +\n                    \" | Scale 1:\" +\n                    Math.round(view.scale * 1) / 1 +\n                    \" | Zoom \" +\n                    view.zoom;\n                coordsWidget.innerHTML = coords;\n            };\n\n            view.watch(\"stationary\", function (isStationary) {\n                showCoordinates(view.center);\n            });\n\n            view.on(\"pointer-move\", function (evt) {\n                showCoordinates(view.toMap({x: evt.x, y: evt.y}));\n            });\n\n        } catch (e) {\n            console.error(e);\n        }\n    };\n\n    useEffect(() => {\n        console.log(`Map get data: ${(new Date()).toLocaleTimeString()}`, data)\n        if (data && data.length > 0) {\n            const layerListDiv = document.getElementById(\"layerListDiv\")\n            if (layerListDiv) {\n                layerListDiv.innerHTML = ''\n            }\n            loadData(data);\n        }\n    }, [data]);\n\n    return (\n        <div id=\"contentDiv\" className={classes.contentDiv}>\n            <div id=\"viewDiv\" className={classes.viewDiv}/>\n            {data &&\n            <div id=\"layerListDiv\" className={classes.layerListDiv}/>\n            }\n        </div>\n    );\n\n};\n\nexport default MyMap;\n","import React, {useContext} from 'react'\n\nimport {CSVReader} from 'react-papaparse'\nimport {DataContext} from \"./context/data-context\";\n\nconst MyDropZone = () => {\n    const [, setData] = useContext(DataContext)\n    const handleOnDrop = (data) => {\n        // console.log('values: ', Object.values(data))\n        const dataValues = Object.values(data)\n            .filter(item => !!item)\n            .map(item => {\n                    const obj = item.data\n                    return {\n                        id: obj.id,\n                        profile: parseInt(obj.profile),\n                        order: parseInt(obj.order),\n                        longitude: parseFloat(obj.longitude),\n                        latitude: parseFloat(obj.latitude),\n                        measure: parseFloat(obj.measure),\n                    }\n                }\n            )\n        // console.log('Read as: ', dataValues)\n        setData(dataValues)\n    }\n\n    const handleOnError = (err, file, inputElem, reason) => {\n        console.log(err)\n    }\n\n    const handleOnRemoveFile = (data) => {\n    }\n\n    return (\n        <CSVReader\n            onDrop={handleOnDrop}\n            onError={handleOnError}\n            addRemoveButton\n            removeButtonColor='#659cef'\n            onRemoveFile={handleOnRemoveFile}\n            config={{header: true}}\n        >\n            <span>Drop CSV file here or click to upload.</span>\n        </CSVReader>\n    )\n}\n\nexport default MyDropZone","import React from \"react\";\nimport MyMap from \"./MyMapZoom\"\nimport MyDropZone from \"./UploadButton\"\nimport {DataContextProvider} from \"./context/data-context\";\n\nconst App = () => {\n    return (\n        <div style={{width: '95%', height: '100%', margin: \"auto\"}}>\n            <DataContextProvider>\n                <MyDropZone/>\n                <MyMap/>\n            </DataContextProvider>\n        </div>\n    );\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}