{"version":3,"sources":["context/data-context.js","MyMapZoom.js","UploadButton.js","App.js","reportWebVitals.js","index.js"],"names":["DataContext","createContext","DataContextProvider","props","useState","data","setData","Provider","value","children","randomcolor","require","useStyles","makeStyles","theme","viewDiv","width","height","contentDiv","margin","layerListDiv","fontSize","padding","MyMap","classes","useContext","loadData","a","options","url","css","loadModules","Map","MapView","FeatureLayer","Point","Polyline","Graphic","LayerList","Collection","array","profileInfoDict","length","structurePoints","filter","pt","order","latitude","longitude","otherPoints","profileNoList","map","s","profile","index","self","indexOf","randomColors","luminosity","count","hue","colorDict","forEach","profileNo","i","console","log","buildPointsFeatures","points","features","item","attr","id","mark","measure","code","attributes","geometry","graphic","push","groupedByProfile","key","reduce","objectsByKeyValue","obj","concat","groupBy","profileDict","Object","keys","d","pointsSorted","sort","b","parseInt","pointsCount","profileLength","Math","round","buildLines","pointsCoordinates","linesArray","hasZ","hasM","paths","spatialReference","wkid","lineRenderer","type","field","uniqueValueInfos","color","symbol","label","createPolylinesLayer","source","objectIdField","fields","name","popupTemplate","title","content","renderer","createStructuresPointsLayer","structuresFeatures","expressionInfos","expression","size","outline","labelingInfo","structuresLabels","createOtherPointsLayer","otherPointsFeatures","otherPointsLabels","haloColor","haloSize","font","family","style","weight","labelPlacement","labelExpressionInfo","deconflictionStrategy","zoomToLayer","layer","queryExtent","then","response","view","goTo","extent","catch","error","structuresLayer","otherPointsLayer","linesLayer","when","basemap","layers","container","center","zoom","highlightOptions","haloOpacity","fillOpacity","layerList","listItemCreatedFunction","event","includes","actionsOpen","actionsSections","className","ui","add","profileExpressions","queryProfile","createQuery","whenLayerView","layerView","fullExtent","on","actionId","action","queryExpression","find","target","duration","easing","where","queryFeatures","result","feature","cloneExt","clone","expand","coordsWidget","document","createElement","showCoordinates","coords","toFixed","scale","innerHTML","watch","isStationary","evt","toMap","x","y","useEffect","Date","toLocaleTimeString","getElementById","MyDropZone","onDrop","dataValues","values","struc_mark","parseFloat","onError","err","file","inputElem","reason","addRemoveButton","removeButtonColor","onRemoveFile","config","header","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e038b12c.chunk.js","sourcesContent":["import React, {useState, createContext} from \"react\";\n\nexport const DataContext = createContext()\n\nexport const DataContextProvider = props => {\n    const [data, setData] = useState([])\n    return (\n        <DataContext.Provider value={[data, setData]}>\n            {props.children}\n        </DataContext.Provider>\n    )\n}","import React, {useContext, useEffect} from \"react\";\nimport {loadModules} from \"esri-loader\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {DataContext} from \"./context/data-context\";\n\nconst randomcolor = require(\"randomcolor\");\n\nconst useStyles = makeStyles((theme) => ({\n    viewDiv: {\n        width: \"100wh\",\n        height: \"90vh\",\n    },\n    contentDiv: {\n        width: \"100wh\",\n        height: \"90vh\",\n        margin: \"10px 5px\",\n    },\n    layerListDiv: {\n        width: \"200px\",\n        fontSize: \"6px\",\n        padding: 0,\n    },\n}));\n\nconst MyMap = () => {\n    const classes = useStyles();\n\n    // const data = readJSON()\n    const [data] = useContext(DataContext)\n\n    const loadData = async (data) => {\n        try {\n            const options = {\n                url: \"https://js.arcgis.com/4.18/init.js\",\n                css: \"https://js.arcgis.com/4.18/esri/themes/light/main.css\",\n            };\n            const [\n                Map,\n                MapView,\n                FeatureLayer,\n                Point,\n                Polyline,\n                Graphic,\n                LayerList,\n                Collection,\n                array,\n            ] = await loadModules(\n                [\n                    \"esri/Map\",\n                    \"esri/views/MapView\",\n                    \"esri/layers/FeatureLayer\",\n                    \"esri/geometry/Point\",\n                    \"esri/geometry/Polyline\",\n                    \"esri/Graphic\",\n                    \"esri/widgets/LayerList\",\n                    \"esri/core/Collection\",\n                    \"dojo/_base/array\",\n                    \"dojo/domReady!\",\n                ],\n                options\n            );\n            let map;\n            let view;\n            const profileInfoDict = {};\n            let linesLayer\n\n            if (data && data.length > 0) {\n                const structurePoints = data.filter(pt => !!pt.order && pt.latitude && pt.longitude);\n                const otherPoints = data.filter(pt => !pt.order && pt.latitude && pt.longitude)\n                const profileNoList = structurePoints.map(s => s.profile)\n                    .filter((value, index, self) => self.indexOf(value) === index)\n                const randomColors = randomcolor({\n                    luminosity: \"bright\",\n                    count: profileNoList.length,\n                    hue: \"red\"\n                })\n                const colorDict = {}\n                profileNoList.forEach((profileNo, i) => {\n                    colorDict[profileNo] = randomColors[i]\n                })\n                console.log('Colors: ', colorDict)\n                console.log('Structure Data: ', 'data length: ', structurePoints.length, 'sample: ', structurePoints[0])\n                console.log('Other Data: ', 'data length: ', otherPoints.length, 'sample: ', otherPoints[0])\n                //   const structureIDList = structurePoints.map((pt) => pt.id);\n\n\n                const buildPointsFeatures = (points) => {\n                    //loop through the items and add to the feature layer\n                    const features = [];\n                    array.forEach(points, function (item) {\n                        // console.log(\"item\", item);\n                        const attr = {};\n                        //pull in any additional attributes if required\n                        attr[\"id\"] = item.id;\n                        if (item.order) {\n                            attr[\"mark\"] = item.mark;\n                            attr[\"profile\"] = item.profile;\n                            attr[\"order\"] = item.order;\n                            attr[\"measure\"] = item.measure;\n                        }\n                        attr[\"longitude\"] = item.longitude;\n                        attr[\"latitude\"] = item.latitude;\n                        attr[\"code\"] = item.code;\n                        attr[\"attributes\"] = item.attributes;\n\n                        const geometry = new Point(item.longitude, item.latitude);\n\n                        const graphic = new Graphic({\n                            geometry: geometry,\n                            attributes: attr,\n                        });\n                        features.push(graphic);\n                    });\n\n                    //   console.log(\"retrieved \", features.length, \" points\");\n                    return features;\n                }\n\n\n                const groupBy = (key) => (array) =>\n                    array.reduce((objectsByKeyValue, obj) => {\n                        const value = obj[key];\n                        objectsByKeyValue[value] = (objectsByKeyValue[value] || []).concat(\n                            obj\n                        );\n                        return objectsByKeyValue;\n                    }, {});\n\n                const groupedByProfile = groupBy(\"profile\");\n                const profileDict = groupedByProfile(structurePoints);\n                // console.log('profile dict', profileDict)\n                Object.keys(profileDict).map((profileNo) => {\n                    let d = {\n                        pointsSorted: profileDict[profileNo].sort((a, b) =>\n                            parseInt(a.order) < parseInt(b.order) ? -1 : 1\n                        ),\n                        pointsCount: profileDict[profileNo].length,\n                    };\n                    const profileLength = Math.round(\n                        d.pointsSorted[d.pointsCount - 1].measure,\n                        0\n                    );\n                    d = {profileLength, ...d};\n                    profileInfoDict[profileNo] = d;\n                });\n\n                // console.log(\"profile sorted dict\", profileInfoDict);\n\n                const buildLines = () => {\n                    //   console.log('grouped', profilePoints)\n                    const linesArray = [];\n                    let pointsCoordinates;\n                    let points;\n                    Object.keys(profileInfoDict).map((profileNo) => {\n                        points = profileInfoDict[profileNo].pointsSorted;\n                        // console.log(\"Profile \", profileNo, points);\n                        pointsCoordinates = [];\n                        points.map((pt) =>\n                            pointsCoordinates.push([pt.longitude, pt.latitude])\n                        );\n                        const geometry = new Polyline({\n                            hasZ: false,\n                            hasM: true,\n                            paths: pointsCoordinates,\n                            spatialReference: {wkid: 4326},\n                        });\n                        const attr = {};\n                        attr[\"objectID\"] = profileNo;\n                        attr[\"count\"] = points.length;\n                        attr[\"length\"] = points[points.length - 1].measure;\n                        const graphic = new Graphic({\n                            geometry: geometry,\n                            attributes: attr,\n                        });\n                        linesArray.push(graphic);\n                    });\n                    //   console.log(\"build lines: \", linesArray.length);\n\n                    const createLineSymbol = (value, color) => {\n                        return {\n                            value: value,\n                            symbol: {\n                                type: \"simple-line\", // autocasts as SimpleLineSymbol()\n                                color: color,\n                                width: 5,\n                            },\n                            label: value,\n                        };\n                    };\n\n                    const lineRenderer = {\n                        type: \"unique-value\",\n                        field: \"objectID\",\n                        uniqueValueInfos: Object.keys(profileInfoDict).map((profileNo) =>\n                            createLineSymbol(\n                                profileNo,\n                                colorDict[profileNo]\n                            )\n                        ),\n                    };\n\n                    return [linesArray, lineRenderer];\n                };\n\n                const createPolylinesLayer = () => {\n                    const [linesArray, lineRenderer] = buildLines();\n                    //   console.log(\"line arrays\", linesArray);\n                    //   console.log(\"line render\", lineRenderer);\n                    return new FeatureLayer({\n                        source: linesArray,\n                        objectIdField: \"objectID\",\n                        fields: [\n                            {\n                                name: \"objectID\",\n                                type: \"oid\",\n                            },\n                            {\n                                name: \"count\",\n                                type: \"integer\",\n                            },\n                            {\n                                name: \"length\",\n                                type: \"double\",\n                            },\n                        ],\n                        popupTemplate: {\n                            title: \"Profile\",\n                            content: \"Profile {objectID} - {count} structures - {length} m\",\n                        },\n                        renderer: lineRenderer,\n                        title: \"Profiles\",\n                    });\n                }\n\n                //  Creates a client-side FeatureLayer from an array of graphics\n                const createStructuresPointsLayer = () => {\n                    const structuresFeatures = buildPointsFeatures(structurePoints);\n                    //   console.log(\"points list\", structuresFeatures);\n\n                    const createColorSymbol = (value) => ({\n                        value: value,\n                        symbol: {\n                            type: \"simple-marker\", // autocasts as new SimpleMarkerSymbol()\n                            size: 8,\n                            color: colorDict[value],\n                            outline: {\n                                // autocasts as new SimpleLineSymbol()\n                                width: 1.5,\n                                color: \"white\",\n                            },\n                        },\n                        label: value\n                    })\n                    return new FeatureLayer({\n                        source: structuresFeatures,\n                        objectIdField: \"id\",\n                        fields: [\n                            {\n                                name: \"id\",\n                                type: \"oid\",\n                            },\n                            {\n                                name: \"profile\",\n                                type: \"string\",\n                            },\n                            {\n                                name: \"order\",\n                                type: \"string\",\n                            },\n                            {\n                                name: \"latitude\",\n                                type: \"double\",\n                            },\n                            {\n                                name: \"longitude\",\n                                type: \"double\",\n                            },\n                            {\n                                name: \"measure\",\n                                type: \"double\",\n                            },\n                            {\n                                name: \"code\",\n                                type: \"string\",\n                            },\n                            {\n                                name: \"mark\",\n                                type: \"string\",\n                            },\n                            {\n                                name: \"attributes\",\n                                type: \"string\",\n                            },\n                        ],\n                        popupTemplate: {\n                            title: \"Structure Point\",\n                            expressionInfos: [\n                                {\n                                    name: \"measure-roundup\",\n                                    title: \"Measure Roundup\",\n                                    expression: \"Round($feature.measure, 0)\",\n                                },\n                            ],\n                            content:\n                                \"<p>Point <b>{id} ({code})</b>\" +\n                                \"<ul><li>Order: {order}</li>\" +\n                                \"<li>Measure: {expression/measure-roundup} m</li>\" +\n                                \"<li>Attributes: {attributes}</li>\" +\n                                \"</ul>\",\n                        },\n\n                        renderer: {\n                            type: \"unique-value\",\n                            field: \"profile\",\n                            uniqueValueInfos: profileNoList.map(profileNo => createColorSymbol(profileNo))\n                        },\n                        labelingInfo: structuresLabels,\n                        title: \"Structure Points\",\n                    });\n                }\n\n\n                const createOtherPointsLayer = () => {\n                    const otherPointsFeatures = buildPointsFeatures(otherPoints);\n                    console.log(\"other points number\", otherPointsFeatures.length);\n                    return new FeatureLayer({\n                        source: otherPointsFeatures,\n                        objectIdField: \"id\",\n                        fields: [\n                            {\n                                name: \"id\",\n                                type: \"oid\",\n                            },\n                            {\n                                name: \"latitude\",\n                                type: \"double\",\n                            },\n                            {\n                                name: \"longitude\",\n                                type: \"double\",\n                            },\n                            {\n                                name: \"code\",\n                                type: \"string\",\n                            },\n                            {\n                                name: \"attributes\",\n                                type: \"string\",\n                            },\n                        ],\n                        popupTemplate: {\n                            title: \"Non-Structure Point\",\n                            content:\n                                \"<p>Point <b>{id} ({code})</b></p>\" +\n                                \"<ul><li>{attributes}</li><ul>\",\n                        },\n                        renderer: {\n                            type: \"simple\", // autocasts as new SimpleRenderer()\n                            symbol: {\n                                type: \"simple-marker\", // autocasts as new SimpleMarkerSymbol()\n                                size: 5,\n                                color: \"blue\",\n                                outline: {\n                                    // autocasts as new SimpleLineSymbol()\n                                    width: 0.5,\n                                    color: \"white\",\n                                },\n                            },\n                        },\n                        labelingInfo: otherPointsLabels,\n                        title: \"Non-Structure Points\",\n                    });\n                }\n\n                const structuresLabels = {\n                    symbol: {\n                        type: \"text\",\n                        color: \"red\",\n                        haloColor: \"white\",\n                        haloSize: \"1.5px\",\n                        font: {\n                            size: \"18px\",\n                            family: \"Noto Sans\",\n                            style: \"italic\",\n                            weight: \"bolder\",\n                        },\n                    },\n                    labelPlacement: \"above-right\",\n                    labelExpressionInfo: {\n                        expression: \"$feature.mark + '' + $feature.order\",\n                    },\n                    deconflictionStrategy: \"static\",\n                };\n\n                const otherPointsLabels = {\n                    symbol: {\n                        type: \"text\",\n                        color: \"blue\",\n                        haloColor: \"white\",\n                        haloSize: \"1px\",\n                        font: {\n                            size: \"15px\",\n                            family: \"Noto Sans\",\n                            style: \"italic\",\n                            weight: \"bolder\",\n                        },\n                    },\n                    labelPlacement: \"above-right\",\n                    labelExpressionInfo: {\n                        expression: \"$feature.id + ' - ' + $feature.code\",\n                    },\n                    deconflictionStrategy: \"static\",\n                };\n\n                const zoomToLayer = (layer) => {\n                    //   console.log(`Zoom to ${layer.title}`);\n                    return layer.queryExtent().then(function (response) {\n                        view.goTo(response.extent).catch(function (error) {\n                            if (error.name !== \"AbortError\") {\n                                console.error(error);\n                            }\n                        });\n                    });\n                };\n\n                const structuresLayer = createStructuresPointsLayer();\n                const otherPointsLayer = createOtherPointsLayer();\n                linesLayer = createPolylinesLayer();\n\n                linesLayer.when(function () {\n                    console.log('Zoom to line layer')\n                    zoomToLayer(linesLayer);\n                })\n\n                map = new Map({\n                    basemap: \"hybrid\",\n                    layers: [linesLayer, otherPointsLayer, structuresLayer],\n                });\n                view = new MapView({\n                    container: \"viewDiv\",\n                    center: [-168, 46],\n                    zoom: 2,\n                    map: map,\n                    // set highlightOptions like color and fillOpacity\n                    highlightOptions: {\n                        color: [255, 255, 0, 1],\n                        haloOpacity: 0.9,\n                        fillOpacity: 0.4,\n                    },\n                });\n\n\n                const createActions = (event) => {\n                    const item = event.item;\n                    //   console.log(\"item\", item);\n\n                    if (item.title.includes(\"Profile\")) {\n                        item.actionsOpen = false;\n                        item.actionsSections = [\n                            [\"All\", ...Object.keys(profileInfoDict)].map((profileNo) => {\n                                // console.log(\"profile detail\", profileInfoDict[profileNo]);\n                                let profileLength;\n                                if (profileNo === \"All\") {\n                                    profileLength = Object.keys(profileInfoDict)\n                                        .map((profileNo) => profileInfoDict[profileNo].profileLength)\n                                        .reduce((a, b) => a + b);\n                                } else {\n                                    profileLength = profileInfoDict[profileNo].profileLength;\n                                }\n                                return {\n                                    title: `Profile ${profileNo} - ${profileLength} m`,\n                                    className: \"esri-icon-zoom-out-fixed\",\n                                    id: profileNo,\n                                };\n                            }),\n                        ];\n                    }\n                }\n                const layerList = new LayerList({\n                    view: view,\n                    listItemCreatedFunction: createActions,\n                    container: \"layerListDiv\",\n                });\n                view.ui.add(layerList, \"top-right\");\n\n                // definitionExpressions used by each action\n                // listed in the LayerList\n\n                const profileExpressions = new Collection(\n                    [\"All\", ...Object.keys(profileInfoDict)].map((profileNo) => ({\n                        id: profileNo,\n                        expression: `objectID = '${profileNo}'`,\n                    }))\n                );\n\n                // When an action is triggered, the definitionExpression\n                // is set on the layer and the view's extent updates\n                // to match the features visible in the layer\n\n                const queryProfile = linesLayer.createQuery();\n                view.whenLayerView(linesLayer).then((layerView) => {\n                    const fullExtent = linesLayer.fullExtent;\n                    layerList.on(\"trigger-action\", (event) => {\n                        const actionId = event.action.id;\n                        const layer = event.item.layer;\n\n                        const queryExpression = profileExpressions.find((item) => {\n                            return item.id === actionId;\n                        }).expression;\n                        // console.log(\"Expression: \", queryExpression);\n\n                        if (!queryExpression.includes(\"All\")) {\n                            queryProfile.where = queryExpression;\n                            layer.queryFeatures(queryProfile).then((result) => {\n                                // the feature to be highlighted\n                                const feature = result.features[0];\n\n                                const ext = feature.geometry.extent;\n                                const cloneExt = ext.clone();\n                                // center the feature\n                                view\n                                    .goTo(\n                                        {\n                                            target: feature.geometry,\n                                            extent: cloneExt.expand(1.5),\n                                        },\n                                        {\n                                            duration: 2000,\n                                            easing: \"in-out-expo\",\n                                        }\n                                    )\n                                    .catch((error) => {\n                                        if (error.name !== \"AbortError\") {\n                                            console.log(error);\n                                        }\n                                    });\n                            });\n                        } else {\n                            view\n                                .goTo(\n                                    {\n                                        target: fullExtent,\n                                    },\n                                    {\n                                        duration: 2000,\n                                        easing: \"in-out-expo\",\n                                    }\n                                )\n                                .catch((error) => {\n                                    if (error.name !== \"AbortError\") {\n                                        console.log(error);\n                                    }\n                                });\n                        }\n                    });\n                });\n\n            } else {\n                map = new Map({\n                    basemap: \"hybrid\",\n                });\n                view = new MapView({\n                    container: \"viewDiv\",\n                    center: [-116, 54],\n                    zoom: 6,\n                    map: map,\n                    // set highlightOptions like color and fillOpacity\n                    highlightOptions: {\n                        color: [255, 255, 0, 1],\n                        haloOpacity: 0.9,\n                        fillOpacity: 0.4,\n                    },\n                });\n            }\n\n\n            const coordsWidget = document.createElement(\"div\");\n            coordsWidget.id = \"coordsWidget\";\n            coordsWidget.className = \"esri-widget esri-component\";\n            coordsWidget.style.padding = \"7px 15px 5px\";\n\n            view.ui.add(coordsWidget, \"bottom-left\");\n\n            const showCoordinates = (pt) => {\n                const coords =\n                    \"Lat/Lon \" +\n                    pt.latitude.toFixed(3) +\n                    \" \" +\n                    pt.longitude.toFixed(3) +\n                    \" | Scale 1:\" +\n                    Math.round(view.scale * 1) / 1 +\n                    \" | Zoom \" +\n                    view.zoom;\n                coordsWidget.innerHTML = coords;\n            };\n\n            view.watch(\"stationary\", function (isStationary) {\n                showCoordinates(view.center);\n            });\n\n            view.on(\"pointer-move\", function (evt) {\n                showCoordinates(view.toMap({x: evt.x, y: evt.y}));\n            });\n\n        } catch (e) {\n            console.error(e);\n        }\n    };\n\n    useEffect(() => {\n        console.log(`Map get data: ${(new Date()).toLocaleTimeString()}`, data)\n\n        const layerListDiv = document.getElementById(\"layerListDiv\")\n        if (layerListDiv) {\n            layerListDiv.innerHTML = ''\n        }\n        loadData(data);\n    }, [data]);\n\n    return (\n        <div id=\"contentDiv\" className={classes.contentDiv}>\n            <div id=\"viewDiv\" className={classes.viewDiv}/>\n            {data &&\n            <div id=\"layerListDiv\" className={classes.layerListDiv}/>\n            }\n        </div>\n    );\n\n};\n\nexport default MyMap;\n","import React, {useContext} from 'react'\n\nimport {CSVReader} from 'react-papaparse'\nimport {DataContext} from \"./context/data-context\";\n\nconst MyDropZone = () => {\n    const [, setData] = useContext(DataContext)\n    const handleOnDrop = (data) => {\n        // console.log('values: ', Object.values(data))\n        const dataValues = Object.values(data)\n            .filter(item => !!item)\n            .map(item => {\n                    const obj = item.data\n                    if (item.data.order) {\n                        return {\n                            id: obj.id,\n                            code: obj.code,\n                            mark: obj.struc_mark,\n                            profile: obj.profile,\n                            order: obj.order,\n                            longitude: parseFloat(obj.longitude),\n                            latitude: parseFloat(obj.latitude),\n                            measure: parseFloat(obj.measure),\n                            attributes: obj.attributes,\n                        }\n\n                    } else {\n\n                        return {\n                            id: obj.id,\n                            code: obj.code,\n                            longitude: parseFloat(obj.longitude),\n                            latitude: parseFloat(obj.latitude),\n                            attributes: obj.attributes,\n                        }\n                    }\n                }\n            )\n        // console.log('Read as: ', dataValues)\n        setData(dataValues)\n    }\n\n    const handleOnError = (err, file, inputElem, reason) => {\n        console.log(err)\n    }\n\n    const handleOnRemoveFile = (data) => {\n    }\n\n    return (\n        <CSVReader\n            onDrop={handleOnDrop}\n            onError={handleOnError}\n            addRemoveButton\n            removeButtonColor='#659cef'\n            onRemoveFile={handleOnRemoveFile}\n            config={{header: true}}\n        >\n            <span>Drop CSV file here or click to upload.</span>\n        </CSVReader>\n    )\n}\n\nexport default MyDropZone","import React from \"react\";\nimport MyMap from \"./MyMapZoom\"\nimport MyDropZone from \"./UploadButton\"\nimport {DataContextProvider} from \"./context/data-context\";\n\nconst App = () => {\n    return (\n        <div style={{width: '95%', height: '100%', margin: \"auto\"}}>\n            <DataContextProvider>\n                <MyDropZone/>\n                <MyMap/>\n            </DataContextProvider>\n        </div>\n    );\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}